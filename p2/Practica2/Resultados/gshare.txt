sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 8 3 1 -mem:width 32 -mem:lat 300 2 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:18:59 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 8 3 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                114 # total simulation time in seconds
sim_inst_rate           877192.9912 # simulation speed (in insts/sec)
sim_total_insn            116441597 # total number of instructions executed
sim_total_refs             33741078 # total number of loads and stores executed
sim_total_loads            26388432 # total number of loads executed
sim_total_stores       7352646.0000 # total number of stores executed
sim_total_branches         23754488 # total number of branches executed
sim_cycle                1044392693 # total simulation time in cycles
sim_IPC                      0.0957 # instructions per cycle
sim_CPI                     10.4439 # cycles per instruction
sim_exec_BW                  0.1115 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                4095978218 # cumulative IFQ occupancy
IFQ_fcount               1019258266 # cumulative IFQ full count
ifq_occupancy                3.9219 # avg IFQ occupancy (insn's)
ifq_rate                     0.1115 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                 35.1762 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9759 # fraction of time (cycle's) IFQ was full
RUU_count               16355670083 # cumulative RUU occupancy
RUU_fcount               1000944631 # cumulative RUU full count
ruu_occupancy               15.6605 # avg RUU occupancy (insn's)
ruu_rate                     0.1115 # avg RUU dispatch rate (insn/cycle)
ruu_latency                140.4624 # avg RUU occupant latency (cycle's)
ruu_full                     0.9584 # fraction of time (cycle's) RUU was full
LSQ_count                8047188500 # cumulative LSQ occupancy
LSQ_fcount                985523771 # cumulative LSQ full count
lsq_occupancy                7.7051 # avg LSQ occupancy (insn's)
lsq_rate                     0.1115 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 69.1092 # avg LSQ occupant latency (cycle's)
lsq_full                     0.9436 # fraction of time (cycle's) LSQ was full
sim_slip                24461310426 # total number of slip cycles
avg_sim_slip               244.6131 # the average slip between issue and retirement
bpred_2lev.lookups         24728310 # total number of bpred lookups
bpred_2lev.updates         20651018 # total number of updates
bpred_2lev.addr_hits       17720700 # total number of address-predicted hits
bpred_2lev.dir_hits        17759147 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           2891871 # total number of misses
bpred_2lev.jr_hits          1106519 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1144770 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.8581 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.8600 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9666 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1421436 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1279364 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1141705 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1103459 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9665 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              122190635 # total number of accesses
il1.hits                  121563448 # total number of hits
il1.misses                   627187 # total number of misses
il1.replacements             626863 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0051 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0051 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               28192111 # total number of accesses
dl1.hits                   24834865 # total number of hits
dl1.misses                  3357246 # total number of misses
dl1.replacements            3356734 # total number of replacements
dl1.writebacks                43924 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1191 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1191 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4028357 # total number of accesses
ul2.hits                     685984 # total number of hits
ul2.misses                  3342373 # total number of misses
ul2.replacements            3339001 # total number of replacements
ul2.writebacks                27503 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8297 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8289 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0068 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             122190635 # total number of accesses
itlb.hits                 122190614 # total number of hits
itlb.misses                      21 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              31598337 # total number of accesses
dtlb.hits                  29529341 # total number of hits
dtlb.misses                 2068996 # total number of misses
dtlb.replacements           2068868 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0655 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0655 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              254980 # total first level page table misses
mem.ptab_accesses        1179760630 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 32 5 1 -mem:width 32 -mem:lat 300 2 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:20:54 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 32 5 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                 97 # total simulation time in seconds
sim_inst_rate          1030927.8454 # simulation speed (in insts/sec)
sim_total_insn            115201602 # total number of instructions executed
sim_total_refs             33430385 # total number of loads and stores executed
sim_total_loads            26091965 # total number of loads executed
sim_total_stores       7338420.0000 # total number of stores executed
sim_total_branches         23410980 # total number of branches executed
sim_cycle                1042406377 # total simulation time in cycles
sim_IPC                      0.0959 # instructions per cycle
sim_CPI                     10.4241 # cycles per instruction
sim_exec_BW                  0.1105 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                4094917630 # cumulative IFQ occupancy
IFQ_fcount               1019147452 # cumulative IFQ full count
ifq_occupancy                3.9283 # avg IFQ occupancy (insn's)
ifq_rate                     0.1105 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                 35.5457 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9777 # fraction of time (cycle's) IFQ was full
RUU_count               16352063384 # cumulative RUU occupancy
RUU_fcount               1001908391 # cumulative RUU full count
ruu_occupancy               15.6868 # avg RUU occupancy (insn's)
ruu_rate                     0.1105 # avg RUU dispatch rate (insn/cycle)
ruu_latency                141.9430 # avg RUU occupant latency (cycle's)
ruu_full                     0.9611 # fraction of time (cycle's) RUU was full
LSQ_count                8046367182 # cumulative LSQ occupancy
LSQ_fcount                985275269 # cumulative LSQ full count
lsq_occupancy                7.7190 # avg LSQ occupancy (insn's)
lsq_rate                     0.1105 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 69.8460 # avg LSQ occupant latency (cycle's)
lsq_full                     0.9452 # fraction of time (cycle's) LSQ was full
sim_slip                24450340902 # total number of slip cycles
avg_sim_slip               244.5034 # the average slip between issue and retirement
bpred_2lev.lookups         24113601 # total number of bpred lookups
bpred_2lev.updates         20651018 # total number of updates
bpred_2lev.addr_hits       17985902 # total number of address-predicted hits
bpred_2lev.dir_hits        18024814 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           2626204 # total number of misses
bpred_2lev.jr_hits          1106053 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1144770 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.8709 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.8728 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9662 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1424293 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1287019 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1141705 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1102993 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9661 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              120318614 # total number of accesses
il1.hits                  119680953 # total number of hits
il1.misses                   637661 # total number of misses
il1.replacements             637330 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0053 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0053 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               28078568 # total number of accesses
dl1.hits                   24721550 # total number of hits
dl1.misses                  3357018 # total number of misses
dl1.replacements            3356506 # total number of replacements
dl1.writebacks                43889 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1196 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1195 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4038568 # total number of accesses
ul2.hits                     696965 # total number of hits
ul2.misses                  3341603 # total number of misses
ul2.replacements            3338229 # total number of replacements
ul2.writebacks                27498 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8274 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8266 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0068 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             120318614 # total number of accesses
itlb.hits                 120318593 # total number of hits
itlb.misses                      21 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              31512881 # total number of accesses
dtlb.hits                  29444018 # total number of hits
dtlb.misses                 2068863 # total number of misses
dtlb.replacements           2068735 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0657 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0656 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              256455 # total first level page table misses
mem.ptab_accesses        1175143158 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 128 7 1 -mem:width 32 -mem:lat 300 2 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:22:31 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 128 7 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                 98 # total simulation time in seconds
sim_inst_rate          1020408.1735 # simulation speed (in insts/sec)
sim_total_insn            111679542 # total number of instructions executed
sim_total_refs             33160061 # total number of loads and stores executed
sim_total_loads            25708304 # total number of loads executed
sim_total_stores       7451757.0000 # total number of stores executed
sim_total_branches         22799114 # total number of branches executed
sim_cycle                1039041405 # total simulation time in cycles
sim_IPC                      0.0962 # instructions per cycle
sim_CPI                     10.3904 # cycles per instruction
sim_exec_BW                  0.1075 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                4092112689 # cumulative IFQ occupancy
IFQ_fcount               1018637176 # cumulative IFQ full count
ifq_occupancy                3.9384 # avg IFQ occupancy (insn's)
ifq_rate                     0.1075 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                 36.6416 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9804 # fraction of time (cycle's) IFQ was full
RUU_count               16349912324 # cumulative RUU occupancy
RUU_fcount               1003227765 # cumulative RUU full count
ruu_occupancy               15.7356 # avg RUU occupancy (insn's)
ruu_rate                     0.1075 # avg RUU dispatch rate (insn/cycle)
ruu_latency                146.4002 # avg RUU occupant latency (cycle's)
ruu_full                     0.9655 # fraction of time (cycle's) RUU was full
LSQ_count                8046412812 # cumulative LSQ occupancy
LSQ_fcount                984996409 # cumulative LSQ full count
lsq_occupancy                7.7441 # avg LSQ occupancy (insn's)
lsq_rate                     0.1075 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 72.0491 # avg LSQ occupant latency (cycle's)
lsq_full                     0.9480 # fraction of time (cycle's) LSQ was full
sim_slip                24456507413 # total number of slip cycles
avg_sim_slip               244.5651 # the average slip between issue and retirement
bpred_2lev.lookups         23441499 # total number of bpred lookups
bpred_2lev.updates         20651018 # total number of updates
bpred_2lev.addr_hits       18600181 # total number of address-predicted hits
bpred_2lev.dir_hits        18637002 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           2014016 # total number of misses
bpred_2lev.jr_hits          1108132 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1144770 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9007 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9025 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9680 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1465975 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1279300 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1141705 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1105072 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9679 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              115854392 # total number of accesses
il1.hits                  115229443 # total number of hits
il1.misses                   624949 # total number of misses
il1.replacements             624618 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0054 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0054 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               27807149 # total number of accesses
dl1.hits                   24449862 # total number of hits
dl1.misses                  3357287 # total number of misses
dl1.replacements            3356775 # total number of replacements
dl1.writebacks                43909 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1207 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1207 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4026145 # total number of accesses
ul2.hits                     684534 # total number of hits
ul2.misses                  3341611 # total number of misses
ul2.replacements            3338237 # total number of replacements
ul2.writebacks                27505 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8300 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8291 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0068 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             115854392 # total number of accesses
itlb.hits                 115854370 # total number of hits
itlb.misses                      22 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              31249692 # total number of accesses
dtlb.hits                  29180709 # total number of hits
dtlb.misses                 2068983 # total number of misses
dtlb.replacements           2068855 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0662 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0662 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              257721 # total first level page table misses
mem.ptab_accesses        1164810618 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 512 9 1 -mem:width 32 -mem:lat 300 2 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:24:10 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 512 9 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                101 # total simulation time in seconds
sim_inst_rate           990099.0198 # simulation speed (in insts/sec)
sim_total_insn            107476507 # total number of instructions executed
sim_total_refs             32265122 # total number of loads and stores executed
sim_total_loads            25053231 # total number of loads executed
sim_total_stores       7211891.0000 # total number of stores executed
sim_total_branches         22115005 # total number of branches executed
sim_cycle                1034874852 # total simulation time in cycles
sim_IPC                      0.0966 # instructions per cycle
sim_CPI                     10.3487 # cycles per instruction
sim_exec_BW                  0.1039 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                4088242097 # cumulative IFQ occupancy
IFQ_fcount               1017851324 # cumulative IFQ full count
ifq_occupancy                3.9505 # avg IFQ occupancy (insn's)
ifq_rate                     0.1039 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                 38.0385 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9836 # fraction of time (cycle's) IFQ was full
RUU_count               16344251983 # cumulative RUU occupancy
RUU_fcount               1004530273 # cumulative RUU full count
ruu_occupancy               15.7935 # avg RUU occupancy (insn's)
ruu_rate                     0.1039 # avg RUU dispatch rate (insn/cycle)
ruu_latency                152.0728 # avg RUU occupant latency (cycle's)
ruu_full                     0.9707 # fraction of time (cycle's) RUU was full
LSQ_count                8044930017 # cumulative LSQ occupancy
LSQ_fcount                984579005 # cumulative LSQ full count
lsq_occupancy                7.7738 # avg LSQ occupancy (insn's)
lsq_rate                     0.1039 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 74.8529 # avg LSQ occupant latency (cycle's)
lsq_full                     0.9514 # fraction of time (cycle's) LSQ was full
sim_slip                24458730508 # total number of slip cycles
avg_sim_slip               244.5873 # the average slip between issue and retirement
bpred_2lev.lookups         22561006 # total number of bpred lookups
bpred_2lev.updates         20651016 # total number of updates
bpred_2lev.addr_hits       19447183 # total number of address-predicted hits
bpred_2lev.dir_hits        19474371 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           1176645 # total number of misses
bpred_2lev.jr_hits          1117767 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1144770 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9417 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9430 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9764 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1356462 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1227832 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1141705 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1114707 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9764 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              110302835 # total number of accesses
il1.hits                  109692644 # total number of hits
il1.misses                   610191 # total number of misses
il1.replacements             609864 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0055 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0055 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               27536429 # total number of accesses
dl1.hits                   24179571 # total number of hits
dl1.misses                  3356858 # total number of misses
dl1.replacements            3356346 # total number of replacements
dl1.writebacks                43893 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1219 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1219 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4010942 # total number of accesses
ul2.hits                     669084 # total number of hits
ul2.misses                  3341858 # total number of misses
ul2.replacements            3338486 # total number of replacements
ul2.writebacks                27486 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8332 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8323 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0069 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             110302835 # total number of accesses
itlb.hits                 110302814 # total number of hits
itlb.misses                      21 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              30952120 # total number of accesses
dtlb.hits                  28883411 # total number of hits
dtlb.misses                 2068709 # total number of misses
dtlb.replacements           2068581 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0668 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0668 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              256455 # total first level page table misses
mem.ptab_accesses        1151626628 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 2048 11 1 -mem:width 32 -mem:lat 300 2 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:25:52 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 2048 11 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               30101335 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955858.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                100 # total simulation time in seconds
sim_inst_rate          1000000.0200 # simulation speed (in insts/sec)
sim_total_insn            104353516 # total number of instructions executed
sim_total_refs             31218043 # total number of loads and stores executed
sim_total_loads            24106819 # total number of loads executed
sim_total_stores       7111224.0000 # total number of stores executed
sim_total_branches         21532656 # total number of branches executed
sim_cycle                1031130766 # total simulation time in cycles
sim_IPC                      0.0970 # instructions per cycle
sim_CPI                     10.3113 # cycles per instruction
sim_exec_BW                  0.1012 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                4085473533 # cumulative IFQ occupancy
IFQ_fcount               1017143727 # cumulative IFQ full count
ifq_occupancy                3.9621 # avg IFQ occupancy (insn's)
ifq_rate                     0.1012 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                 39.1503 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9864 # fraction of time (cycle's) IFQ was full
RUU_count               16339947451 # cumulative RUU occupancy
RUU_fcount               1005150425 # cumulative RUU full count
ruu_occupancy               15.8466 # avg RUU occupancy (insn's)
ruu_rate                     0.1012 # avg RUU dispatch rate (insn/cycle)
ruu_latency                156.5826 # avg RUU occupant latency (cycle's)
ruu_full                     0.9748 # fraction of time (cycle's) RUU was full
LSQ_count                8043742788 # cumulative LSQ occupancy
LSQ_fcount                985863460 # cumulative LSQ full count
lsq_occupancy                7.8009 # avg LSQ occupancy (insn's)
lsq_rate                     0.1012 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 77.0817 # avg LSQ occupant latency (cycle's)
lsq_full                     0.9561 # fraction of time (cycle's) LSQ was full
sim_slip                24484754142 # total number of slip cycles
avg_sim_slip               244.8475 # the average slip between issue and retirement
bpred_2lev.lookups         21817530 # total number of bpred lookups
bpred_2lev.updates         20651016 # total number of updates
bpred_2lev.addr_hits       20108772 # total number of address-predicted hits
bpred_2lev.dir_hits        20137043 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses            513973 # total number of misses
bpred_2lev.jr_hits          1116676 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1144770 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9737 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9751 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9755 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1268141 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1186794 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1141705 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1113616 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9754 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              106383819 # total number of accesses
il1.hits                  105804964 # total number of hits
il1.misses                   578855 # total number of misses
il1.replacements             578527 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0054 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0054 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               27103053 # total number of accesses
dl1.hits                   23745836 # total number of hits
dl1.misses                  3357217 # total number of misses
dl1.replacements            3356705 # total number of replacements
dl1.writebacks                43906 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1239 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1238 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3979978 # total number of accesses
ul2.hits                     637929 # total number of hits
ul2.misses                  3342049 # total number of misses
ul2.replacements            3338675 # total number of replacements
ul2.writebacks                27471 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8397 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8389 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0069 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             106383819 # total number of accesses
itlb.hits                 106383798 # total number of hits
itlb.misses                      21 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              30519409 # total number of accesses
dtlb.hits                  28450247 # total number of hits
dtlb.misses                 2069162 # total number of misses
dtlb.replacements           2069034 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0678 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0678 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              256457 # total first level page table misses
mem.ptab_accesses        1140252038 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 8 3 1 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:27:32 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 8 3 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 25 # total simulation time in seconds
sim_inst_rate          4000000.0000 # simulation speed (in insts/sec)
sim_total_insn            101301884 # total number of instructions executed
sim_total_refs             25476198 # total number of loads and stores executed
sim_total_loads            21665673 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2727673 # total number of branches executed
sim_cycle                  95327039 # total simulation time in cycles
sim_IPC                      1.0490 # instructions per cycle
sim_CPI                      0.9533 # cycles per instruction
sim_exec_BW                  1.0627 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 372119252 # cumulative IFQ occupancy
IFQ_fcount                 92204157 # cumulative IFQ full count
ifq_occupancy                3.9036 # avg IFQ occupancy (insn's)
ifq_rate                     1.0627 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.6734 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9672 # fraction of time (cycle's) IFQ was full
RUU_count                1469241205 # cumulative RUU occupancy
RUU_fcount                 80895859 # cumulative RUU full count
ruu_occupancy               15.4126 # avg RUU occupancy (insn's)
ruu_rate                     1.0627 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.5036 # avg RUU occupant latency (cycle's)
ruu_full                     0.8486 # fraction of time (cycle's) RUU was full
LSQ_count                 362106923 # cumulative LSQ occupancy
LSQ_fcount                  7535976 # cumulative LSQ full count
lsq_occupancy                3.7986 # avg LSQ occupancy (insn's)
lsq_rate                     1.0627 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.5745 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0791 # fraction of time (cycle's) LSQ was full
sim_slip                 1953503002 # total number of slip cycles
avg_sim_slip                19.5350 # the average slip between issue and retirement
bpred_2lev.lookups          2732175 # total number of bpred lookups
bpred_2lev.updates          2600443 # total number of updates
bpred_2lev.addr_hits        2103714 # total number of address-predicted hits
bpred_2lev.dir_hits         2103726 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses            496717 # total number of misses
bpred_2lev.jr_hits                0 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen                0 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.8090 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.8090 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP            0 # total number of RAS predictions used
bpred_2lev.ras_hits.PP            0 # total number of RAS hits
bpred_2lev.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              103240643 # total number of accesses
il1.hits                  103240557 # total number of hits
il1.misses                       86 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24755133 # total number of accesses
dl1.hits                   24589386 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330695 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83851 # total number of misses
ul2.replacements              79755 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             103240643 # total number of accesses
itlb.hits                 103240641 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24755172 # total number of accesses
dtlb.hits                  24753820 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1119400280 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 32 5 1 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:27:57 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 32 5 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 21 # total simulation time in seconds
sim_inst_rate          4761904.7619 # simulation speed (in insts/sec)
sim_total_insn            100134413 # total number of instructions executed
sim_total_refs             24817705 # total number of loads and stores executed
sim_total_loads            21007180 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2604916 # total number of branches executed
sim_cycle                  94700580 # total simulation time in cycles
sim_IPC                      1.0560 # instructions per cycle
sim_CPI                      0.9470 # cycles per instruction
sim_exec_BW                  1.0574 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 375121910 # cumulative IFQ occupancy
IFQ_fcount                 93150670 # cumulative IFQ full count
ifq_occupancy                3.9611 # avg IFQ occupancy (insn's)
ifq_rate                     1.0574 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.7462 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9836 # fraction of time (cycle's) IFQ was full
RUU_count                1474911300 # cumulative RUU occupancy
RUU_fcount                 82804530 # cumulative RUU full count
ruu_occupancy               15.5745 # avg RUU occupancy (insn's)
ruu_rate                     1.0574 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.7293 # avg RUU occupant latency (cycle's)
ruu_full                     0.8744 # fraction of time (cycle's) RUU was full
LSQ_count                 361858762 # cumulative LSQ occupancy
LSQ_fcount                  7533822 # cumulative LSQ full count
lsq_occupancy                3.8211 # avg LSQ occupancy (insn's)
lsq_rate                     1.0574 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.6137 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0796 # fraction of time (cycle's) LSQ was full
sim_slip                 1961244181 # total number of slip cycles
avg_sim_slip                19.6124 # the average slip between issue and retirement
bpred_2lev.lookups          2609419 # total number of bpred lookups
bpred_2lev.updates          2600443 # total number of updates
bpred_2lev.addr_hits        2543500 # total number of address-predicted hits
bpred_2lev.dir_hits         2543513 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses             56930 # total number of misses
bpred_2lev.jr_hits                0 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen                0 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9781 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9781 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP            0 # total number of RAS predictions used
bpred_2lev.ras_hits.PP            0 # total number of RAS hits
bpred_2lev.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              100321969 # total number of accesses
il1.hits                  100321883 # total number of hits
il1.misses                       86 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24755133 # total number of accesses
dl1.hits                   24589386 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330695 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83851 # total number of misses
ul2.replacements              79755 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             100321969 # total number of accesses
itlb.hits                 100321967 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24755172 # total number of accesses
dtlb.hits                  24753820 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1110924498 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 128 7 1 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:28:19 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 128 7 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 26 # total simulation time in seconds
sim_inst_rate          3846153.8462 # simulation speed (in insts/sec)
sim_total_insn            100029437 # total number of instructions executed
sim_total_refs             24765271 # total number of loads and stores executed
sim_total_loads            20954746 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2600461 # total number of branches executed
sim_cycle                  94661452 # total simulation time in cycles
sim_IPC                      1.0564 # instructions per cycle
sim_CPI                      0.9466 # cycles per instruction
sim_exec_BW                  1.0567 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 375428921 # cumulative IFQ occupancy
IFQ_fcount                 93232775 # cumulative IFQ full count
ifq_occupancy                3.9660 # avg IFQ occupancy (insn's)
ifq_rate                     1.0567 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.7532 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9849 # fraction of time (cycle's) IFQ was full
RUU_count                1475740828 # cumulative RUU occupancy
RUU_fcount                 82991614 # cumulative RUU full count
ruu_occupancy               15.5897 # avg RUU occupancy (insn's)
ruu_rate                     1.0567 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.7531 # avg RUU occupant latency (cycle's)
ruu_full                     0.8767 # fraction of time (cycle's) RUU was full
LSQ_count                 362029033 # cumulative LSQ occupancy
LSQ_fcount                  7541746 # cumulative LSQ full count
lsq_occupancy                3.8245 # avg LSQ occupancy (insn's)
lsq_rate                     1.0567 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.6192 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0797 # fraction of time (cycle's) LSQ was full
sim_slip                 1962473743 # total number of slip cycles
avg_sim_slip                19.6247 # the average slip between issue and retirement
bpred_2lev.lookups          2602698 # total number of bpred lookups
bpred_2lev.updates          2600443 # total number of updates
bpred_2lev.addr_hits        2584726 # total number of address-predicted hits
bpred_2lev.dir_hits         2584737 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses             15706 # total number of misses
bpred_2lev.jr_hits                0 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen                0 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9940 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9940 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP            0 # total number of RAS predictions used
bpred_2lev.ras_hits.PP            0 # total number of RAS hits
bpred_2lev.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              100085577 # total number of accesses
il1.hits                  100085490 # total number of hits
il1.misses                       87 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24754019 # total number of accesses
dl1.hits                   24588272 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330696 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83852 # total number of misses
ul2.replacements              79756 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             100085577 # total number of accesses
itlb.hits                 100085575 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24754058 # total number of accesses
dtlb.hits                  24752706 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1110246430 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 512 9 1 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:28:47 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 512 9 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 23 # total simulation time in seconds
sim_inst_rate          4347826.0870 # simulation speed (in insts/sec)
sim_total_insn            100018338 # total number of instructions executed
sim_total_refs             24763046 # total number of loads and stores executed
sim_total_loads            20952521 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2600468 # total number of branches executed
sim_cycle                  94659244 # total simulation time in cycles
sim_IPC                      1.0564 # instructions per cycle
sim_CPI                      0.9466 # cycles per instruction
sim_exec_BW                  1.0566 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 375473360 # cumulative IFQ occupancy
IFQ_fcount                 93243889 # cumulative IFQ full count
ifq_occupancy                3.9666 # avg IFQ occupancy (insn's)
ifq_rate                     1.0566 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.7540 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9850 # fraction of time (cycle's) IFQ was full
RUU_count                1475800828 # cumulative RUU occupancy
RUU_fcount                 83007163 # cumulative RUU full count
ruu_occupancy               15.5907 # avg RUU occupancy (insn's)
ruu_rate                     1.0566 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.7553 # avg RUU occupant latency (cycle's)
ruu_full                     0.8769 # fraction of time (cycle's) RUU was full
LSQ_count                 362088955 # cumulative LSQ occupancy
LSQ_fcount                  7546186 # cumulative LSQ full count
lsq_occupancy                3.8252 # avg LSQ occupancy (insn's)
lsq_rate                     1.0566 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.6202 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0797 # fraction of time (cycle's) LSQ was full
sim_slip                 1962613652 # total number of slip cycles
avg_sim_slip                19.6261 # the average slip between issue and retirement
bpred_2lev.lookups          2600480 # total number of bpred lookups
bpred_2lev.updates          2600443 # total number of updates
bpred_2lev.addr_hits        2589165 # total number of address-predicted hits
bpred_2lev.dir_hits         2589176 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses             11267 # total number of misses
bpred_2lev.jr_hits                0 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen                0 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9957 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9957 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP            0 # total number of RAS predictions used
bpred_2lev.ras_hits.PP            0 # total number of RAS hits
bpred_2lev.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              100063378 # total number of accesses
il1.hits                  100063291 # total number of hits
il1.misses                       87 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24754019 # total number of accesses
dl1.hits                   24588272 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330696 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83852 # total number of misses
ul2.replacements              79756 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             100063378 # total number of accesses
itlb.hits                 100063376 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24754058 # total number of accesses
dtlb.hits                  24752706 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1110197582 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 2048 11 1 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:29:10 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 2048 11 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 20 # total simulation time in seconds
sim_inst_rate          5000000.0000 # simulation speed (in insts/sec)
sim_total_insn            100018368 # total number of instructions executed
sim_total_refs             24763048 # total number of loads and stores executed
sim_total_loads            20952523 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2600472 # total number of branches executed
sim_cycle                  94659251 # total simulation time in cycles
sim_IPC                      1.0564 # instructions per cycle
sim_CPI                      0.9466 # cycles per instruction
sim_exec_BW                  1.0566 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 375473228 # cumulative IFQ occupancy
IFQ_fcount                 93243858 # cumulative IFQ full count
ifq_occupancy                3.9666 # avg IFQ occupancy (insn's)
ifq_rate                     1.0566 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.7540 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9850 # fraction of time (cycle's) IFQ was full
RUU_count                1475800658 # cumulative RUU occupancy
RUU_fcount                 83007119 # cumulative RUU full count
ruu_occupancy               15.5907 # avg RUU occupancy (insn's)
ruu_rate                     1.0566 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.7553 # avg RUU occupant latency (cycle's)
ruu_full                     0.8769 # fraction of time (cycle's) RUU was full
LSQ_count                 362088754 # cumulative LSQ occupancy
LSQ_fcount                  7546173 # cumulative LSQ full count
lsq_occupancy                3.8252 # avg LSQ occupancy (insn's)
lsq_rate                     1.0566 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.6202 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0797 # fraction of time (cycle's) LSQ was full
sim_slip                 1962613221 # total number of slip cycles
avg_sim_slip                19.6261 # the average slip between issue and retirement
bpred_2lev.lookups          2600485 # total number of bpred lookups
bpred_2lev.updates          2600443 # total number of updates
bpred_2lev.addr_hits        2589153 # total number of address-predicted hits
bpred_2lev.dir_hits         2589163 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses             11280 # total number of misses
bpred_2lev.jr_hits                0 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen                0 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9957 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9957 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP            0 # total number of RAS predictions used
bpred_2lev.ras_hits.PP            0 # total number of RAS hits
bpred_2lev.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              100063448 # total number of accesses
il1.hits                  100063361 # total number of hits
il1.misses                       87 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24754020 # total number of accesses
dl1.hits                   24588273 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330696 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83852 # total number of misses
ul2.replacements              79756 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             100063448 # total number of accesses
itlb.hits                 100063446 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24754059 # total number of accesses
dtlb.hits                  24752707 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1110197726 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 8 3 1 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:29:32 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 8 3 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 45 # total simulation time in seconds
sim_inst_rate          2222222.2222 # simulation speed (in insts/sec)
sim_total_insn            111556709 # total number of instructions executed
sim_total_refs             51252227 # total number of loads and stores executed
sim_total_loads            30559556 # total number of loads executed
sim_total_stores       20692671.0000 # total number of stores executed
sim_total_branches         11704330 # total number of branches executed
sim_cycle                  84799703 # total simulation time in cycles
sim_IPC                      1.1792 # instructions per cycle
sim_CPI                      0.8480 # cycles per instruction
sim_exec_BW                  1.3155 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 174094164 # cumulative IFQ occupancy
IFQ_fcount                 39247325 # cumulative IFQ full count
ifq_occupancy                2.0530 # avg IFQ occupancy (insn's)
ifq_rate                     1.3155 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5606 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4628 # fraction of time (cycle's) IFQ was full
RUU_count                 635493389 # cumulative RUU occupancy
RUU_fcount                 10046255 # cumulative RUU full count
ruu_occupancy                7.4941 # avg RUU occupancy (insn's)
ruu_rate                     1.3155 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.6966 # avg RUU occupant latency (cycle's)
ruu_full                     0.1185 # fraction of time (cycle's) RUU was full
LSQ_count                 291123142 # cumulative LSQ occupancy
LSQ_fcount                 14864507 # cumulative LSQ full count
lsq_occupancy                3.4331 # avg LSQ occupancy (insn's)
lsq_rate                     1.3155 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.6096 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1753 # fraction of time (cycle's) LSQ was full
sim_slip                 1020614208 # total number of slip cycles
avg_sim_slip                10.2061 # the average slip between issue and retirement
bpred_2lev.lookups         12041816 # total number of bpred lookups
bpred_2lev.updates         10337354 # total number of updates
bpred_2lev.addr_hits        7668278 # total number of address-predicted hits
bpred_2lev.dir_hits         7887847 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           2449507 # total number of misses
bpred_2lev.jr_hits          1480368 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1699748 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.7418 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.7630 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.8709 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1341036 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1553620 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1270358 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1138356 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.8961 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              122199057 # total number of accesses
il1.hits                  117132552 # total number of hits
il1.misses                  5066505 # total number of misses
il1.replacements            5066100 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0415 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0415 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               46962272 # total number of accesses
dl1.hits                   46846867 # total number of hits
dl1.misses                   115405 # total number of misses
dl1.replacements             114893 # total number of replacements
dl1.writebacks                42596 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0024 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                5224506 # total number of accesses
ul2.hits                    5222496 # total number of hits
ul2.misses                     2010 # total number of misses
ul2.replacements                661 # total number of replacements
ul2.writebacks                  165 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0004 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             122199057 # total number of accesses
itlb.hits                 122199022 # total number of hits
itlb.misses                      35 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              47341957 # total number of accesses
dtlb.hits                  47341906 # total number of hits
dtlb.misses                      51 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              217223 # total first level page table misses
mem.ptab_accesses        1729992956 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 32 5 1 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:30:17 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 32 5 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 44 # total simulation time in seconds
sim_inst_rate          2272727.2955 # simulation speed (in insts/sec)
sim_total_insn            110682069 # total number of instructions executed
sim_total_refs             51035247 # total number of loads and stores executed
sim_total_loads            30674375 # total number of loads executed
sim_total_stores       20360872.0000 # total number of stores executed
sim_total_branches         11666462 # total number of branches executed
sim_cycle                  83849377 # total simulation time in cycles
sim_IPC                      1.1926 # instructions per cycle
sim_CPI                      0.8385 # cycles per instruction
sim_exec_BW                  1.3200 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 172038971 # cumulative IFQ occupancy
IFQ_fcount                 38847240 # cumulative IFQ full count
ifq_occupancy                2.0518 # avg IFQ occupancy (insn's)
ifq_rate                     1.3200 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5544 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4633 # fraction of time (cycle's) IFQ was full
RUU_count                 632872194 # cumulative RUU occupancy
RUU_fcount                  9902527 # cumulative RUU full count
ruu_occupancy                7.5477 # avg RUU occupancy (insn's)
ruu_rate                     1.3200 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.7179 # avg RUU occupant latency (cycle's)
ruu_full                     0.1181 # fraction of time (cycle's) RUU was full
LSQ_count                 288091825 # cumulative LSQ occupancy
LSQ_fcount                 14567847 # cumulative LSQ full count
lsq_occupancy                3.4358 # avg LSQ occupancy (insn's)
lsq_rate                     1.3200 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.6029 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1737 # fraction of time (cycle's) LSQ was full
sim_slip                 1023071478 # total number of slip cycles
avg_sim_slip                10.2307 # the average slip between issue and retirement
bpred_2lev.lookups         11993505 # total number of bpred lookups
bpred_2lev.updates         10337355 # total number of updates
bpred_2lev.addr_hits        7723525 # total number of address-predicted hits
bpred_2lev.dir_hits         7949889 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           2387466 # total number of misses
bpred_2lev.jr_hits          1473574 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1699748 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.7471 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.7690 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.8669 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1348661 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1645585 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1270358 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1131562 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.8907 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              120797957 # total number of accesses
il1.hits                  115692962 # total number of hits
il1.misses                  5104995 # total number of misses
il1.replacements            5104589 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0423 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0423 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               46567516 # total number of accesses
dl1.hits                   46452080 # total number of hits
dl1.misses                   115436 # total number of misses
dl1.replacements             114924 # total number of replacements
dl1.writebacks                42595 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0025 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                5263026 # total number of accesses
ul2.hits                    5261044 # total number of hits
ul2.misses                     1982 # total number of misses
ul2.replacements                633 # total number of replacements
ul2.writebacks                  165 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0004 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             120797957 # total number of accesses
itlb.hits                 120797922 # total number of hits
itlb.misses                      35 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              46939087 # total number of accesses
dtlb.hits                  46939036 # total number of hits
dtlb.misses                      51 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              220755 # total first level page table misses
mem.ptab_accesses        1726828200 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 128 7 1 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:31:01 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 128 7 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 45 # total simulation time in seconds
sim_inst_rate          2222222.2222 # simulation speed (in insts/sec)
sim_total_insn            108336872 # total number of instructions executed
sim_total_refs             49627692 # total number of loads and stores executed
sim_total_loads            29390746 # total number of loads executed
sim_total_stores       20236946.0000 # total number of stores executed
sim_total_branches         11492740 # total number of branches executed
sim_cycle                  80466346 # total simulation time in cycles
sim_IPC                      1.2428 # instructions per cycle
sim_CPI                      0.8047 # cycles per instruction
sim_exec_BW                  1.3464 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 169199894 # cumulative IFQ occupancy
IFQ_fcount                 38266139 # cumulative IFQ full count
ifq_occupancy                2.1027 # avg IFQ occupancy (insn's)
ifq_rate                     1.3464 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5618 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4756 # fraction of time (cycle's) IFQ was full
RUU_count                 631662721 # cumulative RUU occupancy
RUU_fcount                 10648873 # cumulative RUU full count
ruu_occupancy                7.8500 # avg RUU occupancy (insn's)
ruu_rate                     1.3464 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.8305 # avg RUU occupant latency (cycle's)
ruu_full                     0.1323 # fraction of time (cycle's) RUU was full
LSQ_count                 287561051 # cumulative LSQ occupancy
LSQ_fcount                 14580485 # cumulative LSQ full count
lsq_occupancy                3.5737 # avg LSQ occupancy (insn's)
lsq_rate                     1.3464 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.6543 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1812 # fraction of time (cycle's) LSQ was full
sim_slip                 1030802054 # total number of slip cycles
avg_sim_slip                10.3080 # the average slip between issue and retirement
bpred_2lev.lookups         11745566 # total number of bpred lookups
bpred_2lev.updates         10337354 # total number of updates
bpred_2lev.addr_hits        8496581 # total number of address-predicted hits
bpred_2lev.dir_hits         8710487 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           1626867 # total number of misses
bpred_2lev.jr_hits          1486028 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1699748 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.8219 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.8426 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.8743 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1317375 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1636031 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1270358 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1144016 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9005 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              117180420 # total number of accesses
il1.hits                  112126357 # total number of hits
il1.misses                  5054063 # total number of misses
il1.replacements            5053658 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0431 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0431 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               46255178 # total number of accesses
dl1.hits                   46139796 # total number of hits
dl1.misses                   115382 # total number of misses
dl1.replacements             114870 # total number of replacements
dl1.writebacks                42589 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0025 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                5212034 # total number of accesses
ul2.hits                    5210007 # total number of hits
ul2.misses                     2027 # total number of misses
ul2.replacements                675 # total number of replacements
ul2.writebacks                  165 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0004 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             117180420 # total number of accesses
itlb.hits                 117180384 # total number of hits
itlb.misses                      36 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              46673481 # total number of accesses
dtlb.hits                  46673429 # total number of hits
dtlb.misses                      52 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              211834 # total first level page table misses
mem.ptab_accesses        1716324604 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 512 9 1 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:31:47 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 512 9 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 39 # total simulation time in seconds
sim_inst_rate          2564102.5641 # simulation speed (in insts/sec)
sim_total_insn            104296335 # total number of instructions executed
sim_total_refs             47715105 # total number of loads and stores executed
sim_total_loads            27792147 # total number of loads executed
sim_total_stores       19922958.0000 # total number of stores executed
sim_total_branches         10812724 # total number of branches executed
sim_cycle                  75913843 # total simulation time in cycles
sim_IPC                      1.3173 # instructions per cycle
sim_CPI                      0.7591 # cycles per instruction
sim_exec_BW                  1.3739 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 163956998 # cumulative IFQ occupancy
IFQ_fcount                 37239574 # cumulative IFQ full count
ifq_occupancy                2.1598 # avg IFQ occupancy (insn's)
ifq_rate                     1.3739 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5720 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4906 # fraction of time (cycle's) IFQ was full
RUU_count                 623698871 # cumulative RUU occupancy
RUU_fcount                 10968897 # cumulative RUU full count
ruu_occupancy                8.2159 # avg RUU occupancy (insn's)
ruu_rate                     1.3739 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.9801 # avg RUU occupant latency (cycle's)
ruu_full                     0.1445 # fraction of time (cycle's) RUU was full
LSQ_count                 284383462 # cumulative LSQ occupancy
LSQ_fcount                 14703081 # cumulative LSQ full count
lsq_occupancy                3.7461 # avg LSQ occupancy (insn's)
lsq_rate                     1.3739 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.7267 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1937 # fraction of time (cycle's) LSQ was full
sim_slip                 1035420313 # total number of slip cycles
avg_sim_slip                10.3542 # the average slip between issue and retirement
bpred_2lev.lookups         10969739 # total number of bpred lookups
bpred_2lev.updates         10337354 # total number of updates
bpred_2lev.addr_hits        9332669 # total number of address-predicted hits
bpred_2lev.dir_hits         9566936 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses            770418 # total number of misses
bpred_2lev.jr_hits          1465657 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1699748 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9028 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9255 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.8623 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1301578 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1397849 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1270358 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1123645 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.8845 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              111356992 # total number of accesses
il1.hits                  106413471 # total number of hits
il1.misses                  4943521 # total number of misses
il1.replacements            4943116 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0444 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0444 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               45879346 # total number of accesses
dl1.hits                   45763938 # total number of hits
dl1.misses                   115408 # total number of misses
dl1.replacements             114896 # total number of replacements
dl1.writebacks                42595 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0025 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                5101524 # total number of accesses
ul2.hits                    5099530 # total number of hits
ul2.misses                     1994 # total number of misses
ul2.replacements                645 # total number of replacements
ul2.writebacks                  141 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0004 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             111356992 # total number of accesses
itlb.hits                 111356955 # total number of hits
itlb.misses                      37 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              46339360 # total number of accesses
dtlb.hits                  46339309 # total number of hits
dtlb.misses                      51 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              217950 # total first level page table misses
mem.ptab_accesses        1699573762 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 2048 11 1 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:32:26 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 2048 11 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 40 # total simulation time in seconds
sim_inst_rate          2500000.0000 # simulation speed (in insts/sec)
sim_total_insn            102176212 # total number of instructions executed
sim_total_refs             46786198 # total number of loads and stores executed
sim_total_loads            27115477 # total number of loads executed
sim_total_stores       19670721.0000 # total number of stores executed
sim_total_branches         10595266 # total number of branches executed
sim_cycle                  73303712 # total simulation time in cycles
sim_IPC                      1.3642 # instructions per cycle
sim_CPI                      0.7330 # cycles per instruction
sim_exec_BW                  1.3939 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 160870590 # cumulative IFQ occupancy
IFQ_fcount                 36600039 # cumulative IFQ full count
ifq_occupancy                2.1946 # avg IFQ occupancy (insn's)
ifq_rate                     1.3939 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5744 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4993 # fraction of time (cycle's) IFQ was full
RUU_count                 621885351 # cumulative RUU occupancy
RUU_fcount                 11411722 # cumulative RUU full count
ruu_occupancy                8.4837 # avg RUU occupancy (insn's)
ruu_rate                     1.3939 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  6.0864 # avg RUU occupant latency (cycle's)
ruu_full                     0.1557 # fraction of time (cycle's) RUU was full
LSQ_count                 283614546 # cumulative LSQ occupancy
LSQ_fcount                 14741116 # cumulative LSQ full count
lsq_occupancy                3.8690 # avg LSQ occupancy (insn's)
lsq_rate                     1.3939 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.7757 # avg LSQ occupant latency (cycle's)
lsq_full                     0.2011 # fraction of time (cycle's) LSQ was full
sim_slip                 1042730311 # total number of slip cycles
avg_sim_slip                10.4273 # the average slip between issue and retirement
bpred_2lev.lookups         10670720 # total number of bpred lookups
bpred_2lev.updates         10337354 # total number of updates
bpred_2lev.addr_hits        9856509 # total number of address-predicted hits
bpred_2lev.dir_hits        10033574 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses            303780 # total number of misses
bpred_2lev.jr_hits          1522861 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1699748 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9535 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9706 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.8959 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1275506 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1328364 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1270358 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1180849 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9295 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              108281248 # total number of accesses
il1.hits                  103386975 # total number of hits
il1.misses                  4894273 # total number of misses
il1.replacements            4893869 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0452 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0452 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               45612611 # total number of accesses
dl1.hits                   45497429 # total number of hits
dl1.misses                   115182 # total number of misses
dl1.replacements             114670 # total number of replacements
dl1.writebacks                42583 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0025 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                5052038 # total number of accesses
ul2.hits                    5050248 # total number of hits
ul2.misses                     1790 # total number of misses
ul2.replacements                442 # total number of replacements
ul2.writebacks                   83 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0004 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             108281248 # total number of accesses
itlb.hits                 108281211 # total number of hits
itlb.misses                      37 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              46097684 # total number of accesses
dtlb.hits                  46097634 # total number of hits
dtlb.misses                      50 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              202182 # total first level page table misses
mem.ptab_accesses        1691362736 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 8 3 1 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:33:06 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 8 3 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 30 # total simulation time in seconds
sim_inst_rate          3333333.3667 # simulation speed (in insts/sec)
sim_total_insn            116646165 # total number of instructions executed
sim_total_refs             39322171 # total number of loads and stores executed
sim_total_loads            30041722 # total number of loads executed
sim_total_stores       9280449.0000 # total number of stores executed
sim_total_branches         19775017 # total number of branches executed
sim_cycle                  77216859 # total simulation time in cycles
sim_IPC                      1.2951 # instructions per cycle
sim_CPI                      0.7722 # cycles per instruction
sim_exec_BW                  1.5106 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 148429457 # cumulative IFQ occupancy
IFQ_fcount                 31606297 # cumulative IFQ full count
ifq_occupancy                1.9222 # avg IFQ occupancy (insn's)
ifq_rate                     1.5106 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.2725 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4093 # fraction of time (cycle's) IFQ was full
RUU_count                 586253938 # cumulative RUU occupancy
RUU_fcount                 12244859 # cumulative RUU full count
ruu_occupancy                7.5923 # avg RUU occupancy (insn's)
ruu_rate                     1.5106 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.0259 # avg RUU occupant latency (cycle's)
ruu_full                     0.1586 # fraction of time (cycle's) RUU was full
LSQ_count                 202213109 # cumulative LSQ occupancy
LSQ_fcount                  2788948 # cumulative LSQ full count
lsq_occupancy                2.6188 # avg LSQ occupancy (insn's)
lsq_rate                     1.5106 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.7336 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0361 # fraction of time (cycle's) LSQ was full
sim_slip                  857763925 # total number of slip cycles
avg_sim_slip                 8.5776 # the average slip between issue and retirement
bpred_2lev.lookups         20667911 # total number of bpred lookups
bpred_2lev.updates         16535689 # total number of updates
bpred_2lev.addr_hits       11983116 # total number of address-predicted hits
bpred_2lev.dir_hits        12001753 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           4533936 # total number of misses
bpred_2lev.jr_hits          2719670 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          2767615 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.7247 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.7258 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9827 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      3374232 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      2927213 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      2492965 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      2474453 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9926 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              123038880 # total number of accesses
il1.hits                  119628292 # total number of hits
il1.misses                  3410588 # total number of misses
il1.replacements            3410321 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0277 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0277 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               36661390 # total number of accesses
dl1.hits                   36639912 # total number of hits
dl1.misses                    21478 # total number of misses
dl1.replacements              20966 # total number of replacements
dl1.writebacks                10840 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3442906 # total number of accesses
ul2.hits                    3435745 # total number of hits
ul2.misses                     7161 # total number of misses
ul2.replacements               3065 # total number of replacements
ul2.writebacks                 2566 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0021 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0009 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0007 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             123038880 # total number of accesses
itlb.hits                 123038864 # total number of hits
itlb.misses                      16 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              36818825 # total number of accesses
dtlb.hits                  36818702 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             7894838 # total first level page table misses
mem.ptab_accesses        1495017142 # total page table accesses
mem.ptab_miss_rate           0.0053 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 32 5 1 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:33:36 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 32 5 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 30 # total simulation time in seconds
sim_inst_rate          3333333.3667 # simulation speed (in insts/sec)
sim_total_insn            118183071 # total number of instructions executed
sim_total_refs             39945553 # total number of loads and stores executed
sim_total_loads            30516076 # total number of loads executed
sim_total_stores       9429477.0000 # total number of stores executed
sim_total_branches         19965727 # total number of branches executed
sim_cycle                  77620567 # total simulation time in cycles
sim_IPC                      1.2883 # instructions per cycle
sim_CPI                      0.7762 # cycles per instruction
sim_exec_BW                  1.5226 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 151617542 # cumulative IFQ occupancy
IFQ_fcount                 32487950 # cumulative IFQ full count
ifq_occupancy                1.9533 # avg IFQ occupancy (insn's)
ifq_rate                     1.5226 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.2829 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4185 # fraction of time (cycle's) IFQ was full
RUU_count                 592432915 # cumulative RUU occupancy
RUU_fcount                 13202301 # cumulative RUU full count
ruu_occupancy                7.6324 # avg RUU occupancy (insn's)
ruu_rate                     1.5226 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.0128 # avg RUU occupant latency (cycle's)
ruu_full                     0.1701 # fraction of time (cycle's) RUU was full
LSQ_count                 204437137 # cumulative LSQ occupancy
LSQ_fcount                  2911849 # cumulative LSQ full count
lsq_occupancy                2.6338 # avg LSQ occupancy (insn's)
lsq_rate                     1.5226 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.7298 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0375 # fraction of time (cycle's) LSQ was full
sim_slip                  856568293 # total number of slip cycles
avg_sim_slip                 8.5657 # the average slip between issue and retirement
bpred_2lev.lookups         20937898 # total number of bpred lookups
bpred_2lev.updates         16535689 # total number of updates
bpred_2lev.addr_hits       11977550 # total number of address-predicted hits
bpred_2lev.dir_hits        12029554 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           4506135 # total number of misses
bpred_2lev.jr_hits          2686304 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          2767615 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.7243 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.7275 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9706 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      3339598 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      2977805 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      2492965 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      2441087 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9792 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              124772417 # total number of accesses
il1.hits                  121351476 # total number of hits
il1.misses                  3420941 # total number of misses
il1.replacements            3420672 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0274 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0274 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               36896946 # total number of accesses
dl1.hits                   36875454 # total number of hits
dl1.misses                    21492 # total number of misses
dl1.replacements              20980 # total number of replacements
dl1.writebacks                10840 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3453273 # total number of accesses
ul2.hits                    3446111 # total number of hits
ul2.misses                     7162 # total number of misses
ul2.replacements               3066 # total number of replacements
ul2.writebacks                 2567 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0021 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0009 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0007 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             124772417 # total number of accesses
itlb.hits                 124772400 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              37048522 # total number of accesses
dtlb.hits                  37048399 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             7976289 # total first level page table misses
mem.ptab_accesses        1500101978 # total page table accesses
mem.ptab_miss_rate           0.0053 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 128 7 1 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:34:07 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 128 7 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 31 # total simulation time in seconds
sim_inst_rate          3225806.4839 # simulation speed (in insts/sec)
sim_total_insn            114817677 # total number of instructions executed
sim_total_refs             38816999 # total number of loads and stores executed
sim_total_loads            29596793 # total number of loads executed
sim_total_stores       9220206.0000 # total number of stores executed
sim_total_branches         19468670 # total number of branches executed
sim_cycle                  72458583 # total simulation time in cycles
sim_IPC                      1.3801 # instructions per cycle
sim_CPI                      0.7246 # cycles per instruction
sim_exec_BW                  1.5846 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 147477299 # cumulative IFQ occupancy
IFQ_fcount                 31468129 # cumulative IFQ full count
ifq_occupancy                2.0353 # avg IFQ occupancy (insn's)
ifq_rate                     1.5846 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.2844 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4343 # fraction of time (cycle's) IFQ was full
RUU_count                 587314726 # cumulative RUU occupancy
RUU_fcount                 13678033 # cumulative RUU full count
ruu_occupancy                8.1055 # avg RUU occupancy (insn's)
ruu_rate                     1.5846 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.1152 # avg RUU occupant latency (cycle's)
ruu_full                     0.1888 # fraction of time (cycle's) RUU was full
LSQ_count                 203795376 # cumulative LSQ occupancy
LSQ_fcount                  3198356 # cumulative LSQ full count
lsq_occupancy                2.8126 # avg LSQ occupancy (insn's)
lsq_rate                     1.5846 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.7749 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0441 # fraction of time (cycle's) LSQ was full
sim_slip                  866874105 # total number of slip cycles
avg_sim_slip                 8.6687 # the average slip between issue and retirement
bpred_2lev.lookups         20277773 # total number of bpred lookups
bpred_2lev.updates         16535689 # total number of updates
bpred_2lev.addr_hits       12975956 # total number of address-predicted hits
bpred_2lev.dir_hits        13030999 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           3504690 # total number of misses
bpred_2lev.jr_hits          2683261 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          2767615 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.7847 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.7881 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9695 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      3117982 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      2822847 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      2492965 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      2438044 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9780 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              121005421 # total number of accesses
il1.hits                  117664256 # total number of hits
il1.misses                  3341165 # total number of misses
il1.replacements            3340898 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0276 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0276 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               36442447 # total number of accesses
dl1.hits                   36420944 # total number of hits
dl1.misses                    21503 # total number of misses
dl1.replacements              20991 # total number of replacements
dl1.writebacks                10841 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3373509 # total number of accesses
ul2.hits                    3366348 # total number of hits
ul2.misses                     7161 # total number of misses
ul2.replacements               3065 # total number of replacements
ul2.writebacks                 2565 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0021 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0009 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0008 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             121005421 # total number of accesses
itlb.hits                 121005404 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              36601522 # total number of accesses
dtlb.hits                  36601399 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             7918749 # total first level page table misses
mem.ptab_accesses        1489535954 # total page table accesses
mem.ptab_miss_rate           0.0053 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 512 9 1 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:34:38 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 512 9 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 27 # total simulation time in seconds
sim_inst_rate          3703703.7407 # simulation speed (in insts/sec)
sim_total_insn            107475663 # total number of instructions executed
sim_total_refs             37556953 # total number of loads and stores executed
sim_total_loads            28578991 # total number of loads executed
sim_total_stores       8977962.0000 # total number of stores executed
sim_total_branches         17992738 # total number of branches executed
sim_cycle                  63606206 # total simulation time in cycles
sim_IPC                      1.5722 # instructions per cycle
sim_CPI                      0.6361 # cycles per instruction
sim_exec_BW                  1.6897 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 140814874 # cumulative IFQ occupancy
IFQ_fcount                 30213118 # cumulative IFQ full count
ifq_occupancy                2.2139 # avg IFQ occupancy (insn's)
ifq_rate                     1.6897 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3102 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4750 # fraction of time (cycle's) IFQ was full
RUU_count                 579884213 # cumulative RUU occupancy
RUU_fcount                 15707333 # cumulative RUU full count
ruu_occupancy                9.1168 # avg RUU occupancy (insn's)
ruu_rate                     1.6897 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.3955 # avg RUU occupant latency (cycle's)
ruu_full                     0.2469 # fraction of time (cycle's) RUU was full
LSQ_count                 205900998 # cumulative LSQ occupancy
LSQ_fcount                  3847336 # cumulative LSQ full count
lsq_occupancy                3.2371 # avg LSQ occupancy (insn's)
lsq_rate                     1.6897 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.9158 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0605 # fraction of time (cycle's) LSQ was full
sim_slip                  887704962 # total number of slip cycles
avg_sim_slip                 8.8770 # the average slip between issue and retirement
bpred_2lev.lookups         18507538 # total number of bpred lookups
bpred_2lev.updates         16535689 # total number of updates
bpred_2lev.addr_hits       14823238 # total number of address-predicted hits
bpred_2lev.dir_hits        14827804 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           1707885 # total number of misses
bpred_2lev.jr_hits          2733740 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          2767615 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.8964 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.8967 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9878 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      2774882 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      2563743 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      2492965 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      2488523 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9982 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              112858224 # total number of accesses
il1.hits                  109590781 # total number of hits
il1.misses                  3267443 # total number of misses
il1.replacements            3267175 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0290 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0289 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               36097879 # total number of accesses
dl1.hits                   36076384 # total number of hits
dl1.misses                    21495 # total number of misses
dl1.replacements              20983 # total number of replacements
dl1.writebacks                10841 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3299779 # total number of accesses
ul2.hits                    3292619 # total number of hits
ul2.misses                     7160 # total number of misses
ul2.replacements               3064 # total number of replacements
ul2.writebacks                 2564 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0022 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0009 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0008 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             112858224 # total number of accesses
itlb.hits                 112858207 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              36278379 # total number of accesses
dtlb.hits                  36278256 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             7716503 # total first level page table misses
mem.ptab_accesses        1469480002 # total page table accesses
mem.ptab_miss_rate           0.0053 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 2048 11 1 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:35:05 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 2048 11 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 26 # total simulation time in seconds
sim_inst_rate          3846153.8846 # simulation speed (in insts/sec)
sim_total_insn            103401871 # total number of instructions executed
sim_total_refs             36363446 # total number of loads and stores executed
sim_total_loads            27583452 # total number of loads executed
sim_total_stores       8779994.0000 # total number of stores executed
sim_total_branches         17074350 # total number of branches executed
sim_cycle                  58569754 # total simulation time in cycles
sim_IPC                      1.7074 # instructions per cycle
sim_CPI                      0.5857 # cycles per instruction
sim_exec_BW                  1.7654 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 137579266 # cumulative IFQ occupancy
IFQ_fcount                 29792479 # cumulative IFQ full count
ifq_occupancy                2.3490 # avg IFQ occupancy (insn's)
ifq_rate                     1.7654 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3305 # avg IFQ occupant latency (cycle's)
ifq_full                     0.5087 # fraction of time (cycle's) IFQ was full
RUU_count                 572542089 # cumulative RUU occupancy
RUU_fcount                 17001052 # cumulative RUU full count
ruu_occupancy                9.7754 # avg RUU occupancy (insn's)
ruu_rate                     1.7654 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.5371 # avg RUU occupant latency (cycle's)
ruu_full                     0.2903 # fraction of time (cycle's) RUU was full
LSQ_count                 203308952 # cumulative LSQ occupancy
LSQ_fcount                  3964150 # cumulative LSQ full count
lsq_occupancy                3.4712 # avg LSQ occupancy (insn's)
lsq_rate                     1.7654 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.9662 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0677 # fraction of time (cycle's) LSQ was full
sim_slip                  893927756 # total number of slip cycles
avg_sim_slip                 8.9393 # the average slip between issue and retirement
bpred_2lev.lookups         17297529 # total number of bpred lookups
bpred_2lev.updates         16535689 # total number of updates
bpred_2lev.addr_hits       15808772 # total number of address-predicted hits
bpred_2lev.dir_hits        15808925 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses            726764 # total number of misses
bpred_2lev.jr_hits          2738150 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          2767615 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9560 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9560 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9894 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      2620190 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      2504613 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      2492965 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      2492933 # total number of RAS hits
bpred_2lev.ras_rate.PP    1.0000 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              107252987 # total number of accesses
il1.hits                  104153341 # total number of hits
il1.misses                  3099646 # total number of misses
il1.replacements            3099380 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0289 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0289 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               35636143 # total number of accesses
dl1.hits                   35614667 # total number of hits
dl1.misses                    21476 # total number of misses
dl1.replacements              20964 # total number of replacements
dl1.writebacks                10841 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3131963 # total number of accesses
ul2.hits                    3124804 # total number of hits
ul2.misses                     7159 # total number of misses
ul2.replacements               3063 # total number of replacements
ul2.writebacks                 2556 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0023 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0010 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0008 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             107252987 # total number of accesses
itlb.hits                 107252970 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              35818297 # total number of accesses
dtlb.hits                  35818174 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             7578503 # total first level page table misses
mem.ptab_accesses        1454802552 # total page table accesses
mem.ptab_miss_rate           0.0052 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 8 3 1 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:35:31 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 8 3 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 31 # total simulation time in seconds
sim_inst_rate          3225806.5161 # simulation speed (in insts/sec)
sim_total_insn            139290479 # total number of instructions executed
sim_total_refs             33630199 # total number of loads and stores executed
sim_total_loads            27854354 # total number of loads executed
sim_total_stores       5775845.0000 # total number of stores executed
sim_total_branches         28276088 # total number of branches executed
sim_cycle                 109477393 # total simulation time in cycles
sim_IPC                      0.9134 # instructions per cycle
sim_CPI                      1.0948 # cycles per instruction
sim_exec_BW                  1.2723 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 286884943 # cumulative IFQ occupancy
IFQ_fcount                 64213830 # cumulative IFQ full count
ifq_occupancy                2.6205 # avg IFQ occupancy (insn's)
ifq_rate                     1.2723 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.0596 # avg IFQ occupant latency (cycle's)
ifq_full                     0.5865 # fraction of time (cycle's) IFQ was full
RUU_count                1055728153 # cumulative RUU occupancy
RUU_fcount                 39261362 # cumulative RUU full count
ruu_occupancy                9.6433 # avg RUU occupancy (insn's)
ruu_rate                     1.2723 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  7.5793 # avg RUU occupant latency (cycle's)
ruu_full                     0.3586 # fraction of time (cycle's) RUU was full
LSQ_count                 280981847 # cumulative LSQ occupancy
LSQ_fcount                  4383689 # cumulative LSQ full count
lsq_occupancy                2.5666 # avg LSQ occupancy (insn's)
lsq_rate                     1.2723 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.0172 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0400 # fraction of time (cycle's) LSQ was full
sim_slip                 1268894544 # total number of slip cycles
avg_sim_slip                12.6889 # the average slip between issue and retirement
bpred_2lev.lookups         31566474 # total number of bpred lookups
bpred_2lev.updates         19702630 # total number of updates
bpred_2lev.addr_hits       13439619 # total number of address-predicted hits
bpred_2lev.dir_hits        13689378 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           6013252 # total number of misses
bpred_2lev.jr_hits          1159734 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1409179 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.6821 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.6948 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.8230 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      2144353 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      4203463 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1395506 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1146080 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.8213 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              155550900 # total number of accesses
il1.hits                  153900416 # total number of hits
il1.misses                  1650484 # total number of misses
il1.replacements            1650029 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0106 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0106 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               26145709 # total number of accesses
dl1.hits                   25767295 # total number of hits
dl1.misses                   378414 # total number of misses
dl1.replacements             377902 # total number of replacements
dl1.writebacks               119123 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0145 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0145 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0046 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2148021 # total number of accesses
ul2.hits                    2026080 # total number of hits
ul2.misses                   121941 # total number of misses
ul2.replacements             117845 # total number of replacements
ul2.writebacks                47939 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0568 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0549 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0223 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             155550900 # total number of accesses
itlb.hits                 155550869 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              26254134 # total number of accesses
dtlb.hits                  26232208 # total number of hits
dtlb.misses                   21926 # total number of misses
dtlb.replacements             21798 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0008 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0008 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              251768 # total first level page table misses
mem.ptab_accesses        1105389148 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 32 5 1 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:36:02 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 32 5 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 39 # total simulation time in seconds
sim_inst_rate          2564102.6154 # simulation speed (in insts/sec)
sim_total_insn            132266159 # total number of instructions executed
sim_total_refs             31065402 # total number of loads and stores executed
sim_total_loads            25766831 # total number of loads executed
sim_total_stores       5298571.0000 # total number of stores executed
sim_total_branches         26588950 # total number of branches executed
sim_cycle                 102356189 # total simulation time in cycles
sim_IPC                      0.9770 # instructions per cycle
sim_CPI                      1.0236 # cycles per instruction
sim_exec_BW                  1.2922 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 279727151 # cumulative IFQ occupancy
IFQ_fcount                 63021551 # cumulative IFQ full count
ifq_occupancy                2.7329 # avg IFQ occupancy (insn's)
ifq_rate                     1.2922 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.1149 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6157 # fraction of time (cycle's) IFQ was full
RUU_count                1051285469 # cumulative RUU occupancy
RUU_fcount                 41117737 # cumulative RUU full count
ruu_occupancy               10.2709 # avg RUU occupancy (insn's)
ruu_rate                     1.2922 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  7.9483 # avg RUU occupant latency (cycle's)
ruu_full                     0.4017 # fraction of time (cycle's) RUU was full
LSQ_count                 278262295 # cumulative LSQ occupancy
LSQ_fcount                  4371137 # cumulative LSQ full count
lsq_occupancy                2.7186 # avg LSQ occupancy (insn's)
lsq_rate                     1.2922 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.1038 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0427 # fraction of time (cycle's) LSQ was full
sim_slip                 1301486545 # total number of slip cycles
avg_sim_slip                13.0149 # the average slip between issue and retirement
bpred_2lev.lookups         28831412 # total number of bpred lookups
bpred_2lev.updates         19702630 # total number of updates
bpred_2lev.addr_hits       14810377 # total number of address-predicted hits
bpred_2lev.dir_hits        15025853 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           4676777 # total number of misses
bpred_2lev.jr_hits          1194013 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1409179 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.7517 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.7626 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.8473 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1995202 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      3034991 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1395506 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1180359 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.8458 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              145278947 # total number of accesses
il1.hits                  143589619 # total number of hits
il1.misses                  1689328 # total number of misses
il1.replacements            1688869 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0116 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0116 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               25882224 # total number of accesses
dl1.hits                   25506319 # total number of hits
dl1.misses                   375905 # total number of misses
dl1.replacements             375393 # total number of replacements
dl1.writebacks               119054 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0145 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0145 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0046 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2184287 # total number of accesses
ul2.hits                    2064207 # total number of hits
ul2.misses                   120080 # total number of misses
ul2.replacements             115984 # total number of replacements
ul2.writebacks                47824 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0550 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0531 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0219 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             145278947 # total number of accesses
itlb.hits                 145278916 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              25989527 # total number of accesses
dtlb.hits                  25967612 # total number of hits
dtlb.misses                   21915 # total number of misses
dtlb.replacements             21787 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0008 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0008 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              250934 # total first level page table misses
mem.ptab_accesses        1077435830 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 128 7 1 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:36:41 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 128 7 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 44 # total simulation time in seconds
sim_inst_rate          2272727.3182 # simulation speed (in insts/sec)
sim_total_insn            128393628 # total number of instructions executed
sim_total_refs             29947256 # total number of loads and stores executed
sim_total_loads            24787951 # total number of loads executed
sim_total_stores       5159305.0000 # total number of stores executed
sim_total_branches         25343791 # total number of branches executed
sim_cycle                  97578234 # total simulation time in cycles
sim_IPC                      1.0248 # instructions per cycle
sim_CPI                      0.9758 # cycles per instruction
sim_exec_BW                  1.3158 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 273378223 # cumulative IFQ occupancy
IFQ_fcount                 61434590 # cumulative IFQ full count
ifq_occupancy                2.8016 # avg IFQ occupancy (insn's)
ifq_rate                     1.3158 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.1292 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6296 # fraction of time (cycle's) IFQ was full
RUU_count                1039197739 # cumulative RUU occupancy
RUU_fcount                 41610869 # cumulative RUU full count
ruu_occupancy               10.6499 # avg RUU occupancy (insn's)
ruu_rate                     1.3158 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  8.0938 # avg RUU occupant latency (cycle's)
ruu_full                     0.4264 # fraction of time (cycle's) RUU was full
LSQ_count                 273149053 # cumulative LSQ occupancy
LSQ_fcount                  4369763 # cumulative LSQ full count
lsq_occupancy                2.7993 # avg LSQ occupancy (insn's)
lsq_rate                     1.3158 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.1274 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0448 # fraction of time (cycle's) LSQ was full
sim_slip                 1324449449 # total number of slip cycles
avg_sim_slip                13.2445 # the average slip between issue and retirement
bpred_2lev.lookups         27236137 # total number of bpred lookups
bpred_2lev.updates         19702630 # total number of updates
bpred_2lev.addr_hits       15488677 # total number of address-predicted hits
bpred_2lev.dir_hits        15735846 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           3966784 # total number of misses
bpred_2lev.jr_hits          1162340 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1409179 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.7861 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.7987 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.8248 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1968153 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      2747187 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1395506 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1148686 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.8231 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              139782496 # total number of accesses
il1.hits                  138102046 # total number of hits
il1.misses                  1680450 # total number of misses
il1.replacements            1679993 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0120 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0120 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               25180572 # total number of accesses
dl1.hits                   24807153 # total number of hits
dl1.misses                   373419 # total number of misses
dl1.replacements             372907 # total number of replacements
dl1.writebacks               118661 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0148 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0148 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0047 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2172530 # total number of accesses
ul2.hits                    2053548 # total number of hits
ul2.misses                   118982 # total number of misses
ul2.replacements             114886 # total number of replacements
ul2.writebacks                47780 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0548 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0529 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0220 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             139782496 # total number of accesses
itlb.hits                 139782465 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              25277995 # total number of accesses
dtlb.hits                  25256066 # total number of hits
dtlb.misses                   21929 # total number of misses
dtlb.replacements             21801 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0009 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0009 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              251170 # total first level page table misses
mem.ptab_accesses        1063325750 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 512 9 1 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:37:25 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 512 9 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 35 # total simulation time in seconds
sim_inst_rate          2857142.9143 # simulation speed (in insts/sec)
sim_total_insn            115073902 # total number of instructions executed
sim_total_refs             26782840 # total number of loads and stores executed
sim_total_loads            21948970 # total number of loads executed
sim_total_stores       4833870.0000 # total number of stores executed
sim_total_branches         22648571 # total number of branches executed
sim_cycle                  85512440 # total simulation time in cycles
sim_IPC                      1.1694 # instructions per cycle
sim_CPI                      0.8551 # cycles per instruction
sim_exec_BW                  1.3457 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 258265226 # cumulative IFQ occupancy
IFQ_fcount                 58642779 # cumulative IFQ full count
ifq_occupancy                3.0202 # avg IFQ occupancy (insn's)
ifq_rate                     1.3457 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.2443 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6858 # fraction of time (cycle's) IFQ was full
RUU_count                1013934340 # cumulative RUU occupancy
RUU_fcount                 43421940 # cumulative RUU full count
ruu_occupancy               11.8572 # avg RUU occupancy (insn's)
ruu_rate                     1.3457 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  8.8112 # avg RUU occupant latency (cycle's)
ruu_full                     0.5078 # fraction of time (cycle's) RUU was full
LSQ_count                 266896576 # cumulative LSQ occupancy
LSQ_fcount                  4350398 # cumulative LSQ full count
lsq_occupancy                3.1211 # avg LSQ occupancy (insn's)
lsq_rate                     1.3457 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.3193 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0509 # fraction of time (cycle's) LSQ was full
sim_slip                 1340205511 # total number of slip cycles
avg_sim_slip                13.4021 # the average slip between issue and retirement
bpred_2lev.lookups         23594767 # total number of bpred lookups
bpred_2lev.updates         19702630 # total number of updates
bpred_2lev.addr_hits       17538759 # total number of address-predicted hits
bpred_2lev.dir_hits        17653230 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           2049400 # total number of misses
bpred_2lev.jr_hits          1295029 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1409179 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.8902 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.8960 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9190 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1719124 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      2051662 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1395506 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1281375 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9182 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              121770796 # total number of accesses
il1.hits                  120161112 # total number of hits
il1.misses                  1609684 # total number of misses
il1.replacements            1609230 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0132 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0132 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24189414 # total number of accesses
dl1.hits                   23817096 # total number of hits
dl1.misses                   372318 # total number of misses
dl1.replacements             371806 # total number of replacements
dl1.writebacks               118320 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0154 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0154 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0049 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2100322 # total number of accesses
ul2.hits                    1981929 # total number of hits
ul2.misses                   118393 # total number of misses
ul2.replacements             114297 # total number of replacements
ul2.writebacks                47737 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0564 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0544 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0227 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             121770796 # total number of accesses
itlb.hits                 121770765 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24313986 # total number of accesses
dtlb.hits                  24292174 # total number of hits
dtlb.misses                   21812 # total number of misses
dtlb.replacements             21684 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0009 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0009 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              248898 # total first level page table misses
mem.ptab_accesses        1017913818 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred 2lev -bpred:2lev 1 2048 11 1 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:38:00 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 2048 11 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 38 # total simulation time in seconds
sim_inst_rate          2631579.0000 # simulation speed (in insts/sec)
sim_total_insn            108396762 # total number of instructions executed
sim_total_refs             25022585 # total number of loads and stores executed
sim_total_loads            20429602 # total number of loads executed
sim_total_stores       4592983.0000 # total number of stores executed
sim_total_branches         21311766 # total number of branches executed
sim_cycle                  79204241 # total simulation time in cycles
sim_IPC                      1.2626 # instructions per cycle
sim_CPI                      0.7920 # cycles per instruction
sim_exec_BW                  1.3686 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 250995597 # cumulative IFQ occupancy
IFQ_fcount                 57288748 # cumulative IFQ full count
ifq_occupancy                3.1690 # avg IFQ occupancy (insn's)
ifq_rate                     1.3686 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.3155 # avg IFQ occupant latency (cycle's)
ifq_full                     0.7233 # fraction of time (cycle's) IFQ was full
RUU_count                1001315246 # cumulative RUU occupancy
RUU_fcount                 44771687 # cumulative RUU full count
ruu_occupancy               12.6422 # avg RUU occupancy (insn's)
ruu_rate                     1.3686 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  9.2375 # avg RUU occupant latency (cycle's)
ruu_full                     0.5653 # fraction of time (cycle's) RUU was full
LSQ_count                 263036404 # cumulative LSQ occupancy
LSQ_fcount                  4384356 # cumulative LSQ full count
lsq_occupancy                3.3210 # avg LSQ occupancy (insn's)
lsq_rate                     1.3686 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.4266 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0554 # fraction of time (cycle's) LSQ was full
sim_slip                 1349451750 # total number of slip cycles
avg_sim_slip                13.4945 # the average slip between issue and retirement
bpred_2lev.lookups         21822322 # total number of bpred lookups
bpred_2lev.updates         19702630 # total number of updates
bpred_2lev.addr_hits       18657285 # total number of address-predicted hits
bpred_2lev.dir_hits        18721304 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses            981326 # total number of misses
bpred_2lev.jr_hits          1345485 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          1409179 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9469 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9502 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.9548 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      1538658 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1629643 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1395506 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1331831 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9544 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              112582687 # total number of accesses
il1.hits                  111016122 # total number of hits
il1.misses                  1566565 # total number of misses
il1.replacements            1566114 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0139 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0139 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               23723483 # total number of accesses
dl1.hits                   23352566 # total number of hits
dl1.misses                   370917 # total number of misses
dl1.replacements             370405 # total number of replacements
dl1.writebacks               118180 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0156 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0156 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0050 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2055662 # total number of accesses
ul2.hits                    1937366 # total number of hits
ul2.misses                   118296 # total number of misses
ul2.replacements             114200 # total number of replacements
ul2.writebacks                47729 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0575 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0556 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0232 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             112582687 # total number of accesses
itlb.hits                 112582656 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              23860447 # total number of accesses
dtlb.hits                  23838838 # total number of hits
dtlb.misses                   21609 # total number of misses
dtlb.replacements             21481 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0009 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0009 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              249012 # total first level page table misses
mem.ptab_accesses         993947156 # total page table accesses
mem.ptab_miss_rate           0.0003 # first level page table miss rate

