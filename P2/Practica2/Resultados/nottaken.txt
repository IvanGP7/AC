sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred nottaken -mem:width 32 -mem:lat 300 2 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:46:53 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred               nottaken # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                145 # total simulation time in seconds
sim_inst_rate           689655.1793 # simulation speed (in insts/sec)
sim_total_insn            207368084 # total number of instructions executed
sim_total_refs             61063852 # total number of loads and stores executed
sim_total_loads            49633007 # total number of loads executed
sim_total_stores       11430845.0000 # total number of stores executed
sim_total_branches         37284899 # total number of branches executed
sim_cycle                1114591302 # total simulation time in cycles
sim_IPC                      0.0897 # instructions per cycle
sim_CPI                     11.1459 # cycles per instruction
sim_exec_BW                  0.1860 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                4237092556 # cumulative IFQ occupancy
IFQ_fcount               1048616021 # cumulative IFQ full count
ifq_occupancy                3.8015 # avg IFQ occupancy (insn's)
ifq_rate                     0.1860 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                 20.4327 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9408 # fraction of time (cycle's) IFQ was full
RUU_count               16587707009 # cumulative RUU occupancy
RUU_fcount               1000409877 # cumulative RUU full count
ruu_occupancy               14.8823 # avg RUU occupancy (insn's)
ruu_rate                     0.1860 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 79.9916 # avg RUU occupant latency (cycle's)
ruu_full                     0.8976 # fraction of time (cycle's) RUU was full
LSQ_count                5187308232 # cumulative LSQ occupancy
LSQ_fcount                  1780848 # cumulative LSQ full count
lsq_occupancy                4.6540 # avg LSQ occupancy (insn's)
lsq_rate                     0.1860 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 25.0150 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0016 # fraction of time (cycle's) LSQ was full
sim_slip                10684842911 # total number of slip cycles
avg_sim_slip               106.8484 # the average slip between issue and retirement
bpred_nottaken.lookups     45567346 # total number of bpred lookups
bpred_nottaken.updates     20651018 # total number of updates
bpred_nottaken.addr_hits      7855122 # total number of address-predicted hits
bpred_nottaken.dir_hits      7855122 # total number of direction-predicted hits (includes addr-hits)
bpred_nottaken.misses      12795896 # total number of misses
bpred_nottaken.jr_hits            0 # total number of address-predicted hits for JR's
bpred_nottaken.jr_seen      1144770 # total number of JR's seen
bpred_nottaken.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_nottaken.jr_non_ras_seen.PP      1144770 # total number of non-RAS JR's seen
bpred_nottaken.bpred_addr_rate    0.3804 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_nottaken.bpred_dir_rate    0.3804 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_nottaken.bpred_jr_rate    0.0000 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_nottaken.bpred_jr_non_ras_rate.PP    0.0000 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_nottaken.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_nottaken.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_nottaken.used_ras.PP            0 # total number of RAS predictions used
bpred_nottaken.ras_hits.PP            0 # total number of RAS hits
bpred_nottaken.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              254175138 # total number of accesses
il1.hits                  253453959 # total number of hits
il1.misses                   721179 # total number of misses
il1.replacements             720826 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0028 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0028 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               36351561 # total number of accesses
dl1.hits                   32993367 # total number of hits
dl1.misses                  3358194 # total number of misses
dl1.replacements            3357682 # total number of replacements
dl1.writebacks                43937 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0924 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0924 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0012 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4123310 # total number of accesses
ul2.hits                     776278 # total number of hits
ul2.misses                  3347032 # total number of misses
ul2.replacements            3343659 # total number of replacements
ul2.writebacks                27514 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8117 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8109 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             254175138 # total number of accesses
itlb.hits                 254175118 # total number of hits
itlb.misses                      20 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              40556726 # total number of accesses
dtlb.hits                  38487813 # total number of hits
dtlb.misses                 2068913 # total number of misses
dtlb.replacements           2068785 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0510 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0510 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              258304 # total first level page table misses
mem.ptab_accesses        1513118014 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred nottaken -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:49:18 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred               nottaken # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000003 # total number of instructions committed
sim_num_refs               24753982 # total number of loads and stores committed
sim_num_loads              20943496 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 36 # total simulation time in seconds
sim_inst_rate          2777777.8611 # simulation speed (in insts/sec)
sim_total_insn            105763404 # total number of instructions executed
sim_total_refs             25394549 # total number of loads and stores executed
sim_total_loads            21584063 # total number of loads executed
sim_total_stores       3810486.0000 # total number of stores executed
sim_total_branches          3888364 # total number of branches executed
sim_cycle                  96448528 # total simulation time in cycles
sim_IPC                      1.0368 # instructions per cycle
sim_CPI                      0.9645 # cycles per instruction
sim_exec_BW                  1.0966 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 354665362 # cumulative IFQ occupancy
IFQ_fcount                 87014516 # cumulative IFQ full count
ifq_occupancy                3.6773 # avg IFQ occupancy (insn's)
ifq_rate                     1.0966 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.3534 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9022 # fraction of time (cycle's) IFQ was full
RUU_count                1443672950 # cumulative RUU occupancy
RUU_fcount                 72408894 # cumulative RUU full count
ruu_occupancy               14.9683 # avg RUU occupancy (insn's)
ruu_rate                     1.0966 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 13.6500 # avg RUU occupant latency (cycle's)
ruu_full                     0.7508 # fraction of time (cycle's) RUU was full
LSQ_count                 336864159 # cumulative LSQ occupancy
LSQ_fcount                  7042712 # cumulative LSQ full count
lsq_occupancy                3.4927 # avg LSQ occupancy (insn's)
lsq_rate                     1.0966 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.1851 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0730 # fraction of time (cycle's) LSQ was full
sim_slip                 1896675294 # total number of slip cycles
avg_sim_slip                18.9668 # the average slip between issue and retirement
bpred_nottaken.lookups      4537832 # total number of bpred lookups
bpred_nottaken.updates      2600443 # total number of updates
bpred_nottaken.addr_hits       410780 # total number of address-predicted hits
bpred_nottaken.dir_hits       410780 # total number of direction-predicted hits (includes addr-hits)
bpred_nottaken.misses       2189663 # total number of misses
bpred_nottaken.jr_hits            0 # total number of address-predicted hits for JR's
bpred_nottaken.jr_seen            0 # total number of JR's seen
bpred_nottaken.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_nottaken.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_nottaken.bpred_addr_rate    0.1580 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_nottaken.bpred_dir_rate    0.1580 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_nottaken.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_nottaken.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_nottaken.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_nottaken.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_nottaken.used_ras.PP            0 # total number of RAS predictions used
bpred_nottaken.ras_hits.PP            0 # total number of RAS hits
bpred_nottaken.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              114247552 # total number of accesses
il1.hits                  114247464 # total number of hits
il1.misses                       88 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24756169 # total number of accesses
dl1.hits                   24590422 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330697 # total number of accesses
ul2.hits                     246845 # total number of hits
ul2.misses                    83852 # total number of misses
ul2.replacements              79756 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             114247552 # total number of accesses
itlb.hits                 114247550 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24756208 # total number of accesses
dtlb.hits                  24754856 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1140070026 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred nottaken -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:49:54 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred               nottaken # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 69 # total simulation time in seconds
sim_inst_rate          1449275.3768 # simulation speed (in insts/sec)
sim_total_insn            148637112 # total number of instructions executed
sim_total_refs             66832850 # total number of loads and stores executed
sim_total_loads            44763061 # total number of loads executed
sim_total_stores       22069789.0000 # total number of stores executed
sim_total_branches         14775577 # total number of branches executed
sim_cycle                 112406880 # total simulation time in cycles
sim_IPC                      0.8896 # instructions per cycle
sim_CPI                      1.1241 # cycles per instruction
sim_exec_BW                  1.3223 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 221448997 # cumulative IFQ occupancy
IFQ_fcount                 51023104 # cumulative IFQ full count
ifq_occupancy                1.9701 # avg IFQ occupancy (insn's)
ifq_rate                     1.3223 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.4899 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4539 # fraction of time (cycle's) IFQ was full
RUU_count                 668291284 # cumulative RUU occupancy
RUU_fcount                  5747092 # cumulative RUU full count
ruu_occupancy                5.9453 # avg RUU occupancy (insn's)
ruu_rate                     1.3223 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  4.4961 # avg RUU occupant latency (cycle's)
ruu_full                     0.0511 # fraction of time (cycle's) RUU was full
LSQ_count                 306817164 # cumulative LSQ occupancy
LSQ_fcount                 14805826 # cumulative LSQ full count
lsq_occupancy                2.7295 # avg LSQ occupancy (insn's)
lsq_rate                     1.3223 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.0642 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1317 # fraction of time (cycle's) LSQ was full
sim_slip                  972483971 # total number of slip cycles
avg_sim_slip                 9.7248 # the average slip between issue and retirement
bpred_nottaken.lookups     16052815 # total number of bpred lookups
bpred_nottaken.updates     10337355 # total number of updates
bpred_nottaken.addr_hits      2394815 # total number of address-predicted hits
bpred_nottaken.dir_hits      2394815 # total number of direction-predicted hits (includes addr-hits)
bpred_nottaken.misses       7942540 # total number of misses
bpred_nottaken.jr_hits            0 # total number of address-predicted hits for JR's
bpred_nottaken.jr_seen      1699748 # total number of JR's seen
bpred_nottaken.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_nottaken.jr_non_ras_seen.PP      1699748 # total number of non-RAS JR's seen
bpred_nottaken.bpred_addr_rate    0.2317 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_nottaken.bpred_dir_rate    0.2317 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_nottaken.bpred_jr_rate    0.0000 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_nottaken.bpred_jr_non_ras_rate.PP    0.0000 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_nottaken.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_nottaken.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_nottaken.used_ras.PP            0 # total number of RAS predictions used
bpred_nottaken.ras_hits.PP            0 # total number of RAS hits
bpred_nottaken.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              179208468 # total number of accesses
il1.hits                  172879466 # total number of hits
il1.misses                  6329002 # total number of misses
il1.replacements            6328584 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0353 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0353 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               48777319 # total number of accesses
dl1.hits                   48661736 # total number of hits
dl1.misses                   115583 # total number of misses
dl1.replacements             115071 # total number of replacements
dl1.writebacks                42626 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0024 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0024 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                6487211 # total number of accesses
ul2.hits                    6485181 # total number of hits
ul2.misses                     2030 # total number of misses
ul2.replacements                661 # total number of replacements
ul2.writebacks                  165 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0003 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             179208468 # total number of accesses
itlb.hits                 179208433 # total number of hits
itlb.misses                      35 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              49106984 # total number of accesses
dtlb.hits                  49106932 # total number of hits
dtlb.misses                      52 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              201189 # total first level page table misses
mem.ptab_accesses        1896322786 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred nottaken -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:51:04 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred               nottaken # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 69 # total simulation time in seconds
sim_inst_rate          1449275.3768 # simulation speed (in insts/sec)
sim_total_insn            176549057 # total number of instructions executed
sim_total_refs             61063303 # total number of loads and stores executed
sim_total_loads            50802638 # total number of loads executed
sim_total_stores       10260665.0000 # total number of stores executed
sim_total_branches         28092363 # total number of branches executed
sim_cycle                 115650037 # total simulation time in cycles
sim_IPC                      0.8647 # instructions per cycle
sim_CPI                      1.1565 # cycles per instruction
sim_exec_BW                  1.5266 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 227353458 # cumulative IFQ occupancy
IFQ_fcount                 49995642 # cumulative IFQ full count
ifq_occupancy                1.9659 # avg IFQ occupancy (insn's)
ifq_rate                     1.5266 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.2878 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4323 # fraction of time (cycle's) IFQ was full
RUU_count                 649114199 # cumulative RUU occupancy
RUU_fcount                  7900605 # cumulative RUU full count
ruu_occupancy                5.6127 # avg RUU occupancy (insn's)
ruu_rate                     1.5266 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.6767 # avg RUU occupant latency (cycle's)
ruu_full                     0.0683 # fraction of time (cycle's) RUU was full
LSQ_count                 228693715 # cumulative LSQ occupancy
LSQ_fcount                  2146885 # cumulative LSQ full count
lsq_occupancy                1.9775 # avg LSQ occupancy (insn's)
lsq_rate                     1.5266 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.2954 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0186 # fraction of time (cycle's) LSQ was full
sim_slip                  782160463 # total number of slip cycles
avg_sim_slip                 7.8216 # the average slip between issue and retirement
bpred_nottaken.lookups     32968594 # total number of bpred lookups
bpred_nottaken.updates     16535689 # total number of updates
bpred_nottaken.addr_hits      5487094 # total number of address-predicted hits
bpred_nottaken.dir_hits      5487094 # total number of direction-predicted hits (includes addr-hits)
bpred_nottaken.misses      11048595 # total number of misses
bpred_nottaken.jr_hits        29427 # total number of address-predicted hits for JR's
bpred_nottaken.jr_seen      2767615 # total number of JR's seen
bpred_nottaken.jr_non_ras_hits.PP        29427 # total number of address-predicted hits for non-RAS JR's
bpred_nottaken.jr_non_ras_seen.PP      2767615 # total number of non-RAS JR's seen
bpred_nottaken.bpred_addr_rate    0.3318 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_nottaken.bpred_dir_rate    0.3318 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_nottaken.bpred_jr_rate    0.0106 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_nottaken.bpred_jr_non_ras_rate.PP    0.0106 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_nottaken.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_nottaken.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_nottaken.used_ras.PP            0 # total number of RAS predictions used
bpred_nottaken.ras_hits.PP            0 # total number of RAS hits
bpred_nottaken.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              213829972 # total number of accesses
il1.hits                  209584173 # total number of hits
il1.misses                  4245799 # total number of misses
il1.replacements            4245516 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0199 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0199 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               41303404 # total number of accesses
dl1.hits                   41281910 # total number of hits
dl1.misses                    21494 # total number of misses
dl1.replacements              20982 # total number of replacements
dl1.writebacks                10840 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0005 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0005 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4278133 # total number of accesses
ul2.hits                    4270960 # total number of hits
ul2.misses                     7173 # total number of misses
ul2.replacements               3077 # total number of replacements
ul2.writebacks                 2573 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0017 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0007 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0006 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             213829972 # total number of accesses
itlb.hits                 213829956 # total number of hits
itlb.misses                      16 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              41409587 # total number of accesses
dtlb.hits                  41409464 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             8396216 # total first level page table misses
mem.ptab_accesses        1756252994 # total page table accesses
mem.ptab_miss_rate           0.0048 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred nottaken -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:52:13 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred               nottaken # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 55 # total simulation time in seconds
sim_inst_rate          1818181.8545 # simulation speed (in insts/sec)
sim_total_insn            200822275 # total number of instructions executed
sim_total_refs             50841134 # total number of loads and stores executed
sim_total_loads            42611621 # total number of loads executed
sim_total_stores       8229513.0000 # total number of stores executed
sim_total_branches         37731715 # total number of branches executed
sim_cycle                 147201246 # total simulation time in cycles
sim_IPC                      0.6793 # instructions per cycle
sim_CPI                      1.4720 # cycles per instruction
sim_exec_BW                  1.3643 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 362464965 # cumulative IFQ occupancy
IFQ_fcount                 77463502 # cumulative IFQ full count
ifq_occupancy                2.4624 # avg IFQ occupancy (insn's)
ifq_rate                     1.3643 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.8049 # avg IFQ occupant latency (cycle's)
ifq_full                     0.5262 # fraction of time (cycle's) IFQ was full
RUU_count                1152418811 # cumulative RUU occupancy
RUU_fcount                 33620126 # cumulative RUU full count
ruu_occupancy                7.8289 # avg RUU occupancy (insn's)
ruu_rate                     1.3643 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.7385 # avg RUU occupant latency (cycle's)
ruu_full                     0.2284 # fraction of time (cycle's) RUU was full
LSQ_count                 308152795 # cumulative LSQ occupancy
LSQ_fcount                  4444639 # cumulative LSQ full count
lsq_occupancy                2.0934 # avg LSQ occupancy (insn's)
lsq_rate                     1.3643 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.5345 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0302 # fraction of time (cycle's) LSQ was full
sim_slip                 1193997967 # total number of slip cycles
avg_sim_slip                11.9400 # the average slip between issue and retirement
bpred_nottaken.lookups     44885073 # total number of bpred lookups
bpred_nottaken.updates     19702631 # total number of updates
bpred_nottaken.addr_hits      8121729 # total number of address-predicted hits
bpred_nottaken.dir_hits      8121729 # total number of direction-predicted hits (includes addr-hits)
bpred_nottaken.misses      11580902 # total number of misses
bpred_nottaken.jr_hits            0 # total number of address-predicted hits for JR's
bpred_nottaken.jr_seen      1409179 # total number of JR's seen
bpred_nottaken.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_nottaken.jr_non_ras_seen.PP      1409179 # total number of non-RAS JR's seen
bpred_nottaken.bpred_addr_rate    0.4122 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_nottaken.bpred_dir_rate    0.4122 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_nottaken.bpred_jr_rate    0.0000 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_nottaken.bpred_jr_non_ras_rate.PP    0.0000 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_nottaken.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_nottaken.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_nottaken.used_ras.PP            0 # total number of RAS predictions used
bpred_nottaken.ras_hits.PP            0 # total number of RAS hits
bpred_nottaken.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              240338049 # total number of accesses
il1.hits                  238290390 # total number of hits
il1.misses                  2047659 # total number of misses
il1.replacements            2047188 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0085 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0085 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               31540685 # total number of accesses
dl1.hits                   31153617 # total number of hits
dl1.misses                   387068 # total number of misses
dl1.replacements             386556 # total number of replacements
dl1.writebacks               120242 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0123 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0123 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0038 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2554969 # total number of accesses
ul2.hits                    2430295 # total number of hits
ul2.misses                   124674 # total number of misses
ul2.replacements             120578 # total number of replacements
ul2.writebacks                48135 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0488 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0472 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0188 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             240338049 # total number of accesses
itlb.hits                 240338017 # total number of hits
itlb.misses                      32 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              31554465 # total number of accesses
dtlb.hits                  31532651 # total number of hits
dtlb.misses                   21814 # total number of misses
dtlb.replacements             21686 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0007 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0007 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              312997 # total first level page table misses
mem.ptab_accesses        1325726256 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

