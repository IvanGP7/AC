sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 8 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:18:20 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     8 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                 27 # total simulation time in seconds
sim_inst_rate          3703703.7407 # simulation speed (in insts/sec)
sim_total_insn            112552919 # total number of instructions executed
sim_total_refs             32430359 # total number of loads and stores executed
sim_total_loads            25195231 # total number of loads executed
sim_total_stores       7235128.0000 # total number of stores executed
sim_total_branches         23186088 # total number of branches executed
sim_cycle                 152503913 # total simulation time in cycles
sim_IPC                      0.6557 # instructions per cycle
sim_CPI                      1.5250 # cycles per instruction
sim_exec_BW                  0.7380 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                 540622950 # cumulative IFQ occupancy
IFQ_fcount                129852027 # cumulative IFQ full count
ifq_occupancy                3.5450 # avg IFQ occupancy (insn's)
ifq_rate                     0.7380 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  4.8033 # avg IFQ occupant latency (cycle's)
ifq_full                     0.8515 # fraction of time (cycle's) IFQ was full
RUU_count                2152842620 # cumulative RUU occupancy
RUU_fcount                111785971 # cumulative RUU full count
ruu_occupancy               14.1166 # avg RUU occupancy (insn's)
ruu_rate                     0.7380 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 19.1274 # avg RUU occupant latency (cycle's)
ruu_full                     0.7330 # fraction of time (cycle's) RUU was full
LSQ_count                 962833253 # cumulative LSQ occupancy
LSQ_fcount                105623944 # cumulative LSQ full count
lsq_occupancy                6.3135 # avg LSQ occupancy (insn's)
lsq_rate                     0.7380 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  8.5545 # avg LSQ occupant latency (cycle's)
lsq_full                     0.6926 # fraction of time (cycle's) LSQ was full
sim_slip                 3206700538 # total number of slip cycles
avg_sim_slip                32.0670 # the average slip between issue and retirement
bpred_bimod.lookups        23921299 # total number of bpred lookups
bpred_bimod.updates        20651018 # total number of updates
bpred_bimod.addr_hits      17755318 # total number of address-predicted hits
bpred_bimod.dir_hits       17770575 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          2880443 # total number of misses
bpred_bimod.jr_hits         1129690 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1144770 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8598 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8605 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9868 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1370046 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1245323 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1141705 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1126630 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9868 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              117730785 # total number of accesses
il1.hits                  117108894 # total number of hits
il1.misses                   621891 # total number of misses
il1.replacements             621569 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0053 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0053 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               27381964 # total number of accesses
dl1.hits                   24024567 # total number of hits
dl1.misses                  3357397 # total number of misses
dl1.replacements            3356885 # total number of replacements
dl1.writebacks                43913 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1226 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1226 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4023201 # total number of accesses
ul2.hits                     681578 # total number of hits
ul2.misses                  3341623 # total number of misses
ul2.replacements            3338251 # total number of replacements
ul2.writebacks                27490 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8306 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8297 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0068 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             117730785 # total number of accesses
itlb.hits                 117730765 # total number of hits
itlb.misses                      20 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              30797899 # total number of accesses
dtlb.hits                  28727926 # total number of hits
dtlb.misses                 2069973 # total number of misses
dtlb.replacements           2069845 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0672 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0672 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              254654 # total first level page table misses
mem.ptab_accesses        1166803932 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 32 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:18:47 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     32 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                 30 # total simulation time in seconds
sim_inst_rate          3333333.3667 # simulation speed (in insts/sec)
sim_total_insn            110112029 # total number of instructions executed
sim_total_refs             32195305 # total number of loads and stores executed
sim_total_loads            24959347 # total number of loads executed
sim_total_stores       7235958.0000 # total number of stores executed
sim_total_branches         22489444 # total number of branches executed
sim_cycle                 147864938 # total simulation time in cycles
sim_IPC                      0.6763 # instructions per cycle
sim_CPI                      1.4786 # cycles per instruction
sim_exec_BW                  0.7447 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                 544215978 # cumulative IFQ occupancy
IFQ_fcount                131881307 # cumulative IFQ full count
ifq_occupancy                3.6805 # avg IFQ occupancy (insn's)
ifq_rate                     0.7447 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  4.9424 # avg IFQ occupant latency (cycle's)
ifq_full                     0.8919 # fraction of time (cycle's) IFQ was full
RUU_count                2157230832 # cumulative RUU occupancy
RUU_fcount                117446964 # cumulative RUU full count
ruu_occupancy               14.5892 # avg RUU occupancy (insn's)
ruu_rate                     0.7447 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 19.5912 # avg RUU occupant latency (cycle's)
ruu_full                     0.7943 # fraction of time (cycle's) RUU was full
LSQ_count                 965147625 # cumulative LSQ occupancy
LSQ_fcount                106190560 # cumulative LSQ full count
lsq_occupancy                6.5272 # avg LSQ occupancy (insn's)
lsq_rate                     0.7447 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  8.7651 # avg LSQ occupant latency (cycle's)
lsq_full                     0.7182 # fraction of time (cycle's) LSQ was full
sim_slip                 3218402386 # total number of slip cycles
avg_sim_slip                32.1840 # the average slip between issue and retirement
bpred_bimod.lookups        22957355 # total number of bpred lookups
bpred_bimod.updates        20651018 # total number of updates
bpred_bimod.addr_hits      19003062 # total number of address-predicted hits
bpred_bimod.dir_hits       19026420 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          1624598 # total number of misses
bpred_bimod.jr_hits         1121581 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1144770 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9202 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9213 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9797 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1362118 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1246797 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1141705 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1118521 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9797 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              114238718 # total number of accesses
il1.hits                  113615251 # total number of hits
il1.misses                   623467 # total number of misses
il1.replacements             623149 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0055 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0055 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               27406778 # total number of accesses
dl1.hits                   24049674 # total number of hits
dl1.misses                  3357104 # total number of misses
dl1.replacements            3356592 # total number of replacements
dl1.writebacks                43920 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1225 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1225 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4024491 # total number of accesses
ul2.hits                     682112 # total number of hits
ul2.misses                  3342379 # total number of misses
ul2.replacements            3339008 # total number of replacements
ul2.writebacks                27497 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8305 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8297 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0068 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             114238718 # total number of accesses
itlb.hits                 114238697 # total number of hits
itlb.misses                      21 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              30815350 # total number of accesses
dtlb.hits                  28746356 # total number of hits
dtlb.misses                 2068994 # total number of misses
dtlb.replacements           2068866 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0671 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0671 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              258692 # total first level page table misses
mem.ptab_accesses        1158789440 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 128 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:19:17 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     128 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                 37 # total simulation time in seconds
sim_inst_rate          2702702.7297 # simulation speed (in insts/sec)
sim_total_insn            107592449 # total number of instructions executed
sim_total_refs             31682730 # total number of loads and stores executed
sim_total_loads            24446434 # total number of loads executed
sim_total_stores       7236296.0000 # total number of stores executed
sim_total_branches         22048114 # total number of branches executed
sim_cycle                 145043742 # total simulation time in cycles
sim_IPC                      0.6894 # instructions per cycle
sim_CPI                      1.4504 # cycles per instruction
sim_exec_BW                  0.7418 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                 542217487 # cumulative IFQ occupancy
IFQ_fcount                131442476 # cumulative IFQ full count
ifq_occupancy                3.7383 # avg IFQ occupancy (insn's)
ifq_rate                     0.7418 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  5.0395 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9062 # fraction of time (cycle's) IFQ was full
RUU_count                2155901027 # cumulative RUU occupancy
RUU_fcount                118410428 # cumulative RUU full count
ruu_occupancy               14.8638 # avg RUU occupancy (insn's)
ruu_rate                     0.7418 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 20.0377 # avg RUU occupant latency (cycle's)
ruu_full                     0.8164 # fraction of time (cycle's) RUU was full
LSQ_count                 964648475 # cumulative LSQ occupancy
LSQ_fcount                106205627 # cumulative LSQ full count
lsq_occupancy                6.6507 # avg LSQ occupancy (insn's)
lsq_rate                     0.7418 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  8.9658 # avg LSQ occupant latency (cycle's)
lsq_full                     0.7322 # fraction of time (cycle's) LSQ was full
sim_slip                 3221736311 # total number of slip cycles
avg_sim_slip                32.2174 # the average slip between issue and retirement
bpred_bimod.lookups        22388470 # total number of bpred lookups
bpred_bimod.updates        20651018 # total number of updates
bpred_bimod.addr_hits      19590756 # total number of address-predicted hits
bpred_bimod.dir_hits       19609034 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          1041984 # total number of misses
bpred_bimod.jr_hits         1126671 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1144770 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9487 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9495 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9842 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1292056 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1163701 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1141705 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1123611 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9842 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              110996210 # total number of accesses
il1.hits                  110395125 # total number of hits
il1.misses                   601085 # total number of misses
il1.replacements             600770 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0054 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0054 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               27205232 # total number of accesses
dl1.hits                   23847831 # total number of hits
dl1.misses                  3357401 # total number of misses
dl1.replacements            3356889 # total number of replacements
dl1.writebacks                43910 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1234 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1234 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4002396 # total number of accesses
ul2.hits                     660017 # total number of hits
ul2.misses                  3342379 # total number of misses
ul2.replacements            3339007 # total number of replacements
ul2.writebacks                27498 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8351 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8343 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0069 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             110996210 # total number of accesses
itlb.hits                 110996190 # total number of hits
itlb.misses                      20 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              30614178 # total number of accesses
dtlb.hits                  28545166 # total number of hits
dtlb.misses                 2069012 # total number of misses
dtlb.replacements           2068884 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0676 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0676 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              254930 # total first level page table misses
mem.ptab_accesses        1150630578 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 512 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:19:55 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     512 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                 35 # total simulation time in seconds
sim_inst_rate          2857142.8857 # simulation speed (in insts/sec)
sim_total_insn            105934120 # total number of instructions executed
sim_total_refs             31212658 # total number of loads and stores executed
sim_total_loads            24152116 # total number of loads executed
sim_total_stores       7060542.0000 # total number of stores executed
sim_total_branches         21763786 # total number of branches executed
sim_cycle                 143438499 # total simulation time in cycles
sim_IPC                      0.6972 # instructions per cycle
sim_CPI                      1.4344 # cycles per instruction
sim_exec_BW                  0.7385 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                 541397527 # cumulative IFQ occupancy
IFQ_fcount                131271732 # cumulative IFQ full count
ifq_occupancy                3.7744 # avg IFQ occupancy (insn's)
ifq_rate                     0.7385 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  5.1107 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9152 # fraction of time (cycle's) IFQ was full
RUU_count                2152828012 # cumulative RUU occupancy
RUU_fcount                119176498 # cumulative RUU full count
ruu_occupancy               15.0087 # avg RUU occupancy (insn's)
ruu_rate                     0.7385 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 20.3223 # avg RUU occupant latency (cycle's)
ruu_full                     0.8309 # fraction of time (cycle's) RUU was full
LSQ_count                 963923380 # cumulative LSQ occupancy
LSQ_fcount                106255304 # cumulative LSQ full count
lsq_occupancy                6.7201 # avg LSQ occupancy (insn's)
lsq_rate                     0.7385 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  9.0993 # avg LSQ occupant latency (cycle's)
lsq_full                     0.7408 # fraction of time (cycle's) LSQ was full
sim_slip                 3227065434 # total number of slip cycles
avg_sim_slip                32.2707 # the average slip between issue and retirement
bpred_bimod.lookups        22095515 # total number of bpred lookups
bpred_bimod.updates        20651018 # total number of updates
bpred_bimod.addr_hits      19918856 # total number of address-predicted hits
bpred_bimod.dir_hits       19925266 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           725752 # total number of misses
bpred_bimod.jr_hits         1138540 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1144770 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9645 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9649 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9946 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1236068 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1147856 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1141705 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1135480 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9945 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              109017911 # total number of accesses
il1.hits                  108455389 # total number of hits
il1.misses                   562522 # total number of misses
il1.replacements             562210 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0052 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0052 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               27075879 # total number of accesses
dl1.hits                   23719513 # total number of hits
dl1.misses                  3356366 # total number of misses
dl1.replacements            3355854 # total number of replacements
dl1.writebacks                43869 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1240 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1239 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3962757 # total number of accesses
ul2.hits                     620659 # total number of hits
ul2.misses                  3342098 # total number of misses
ul2.replacements            3338726 # total number of replacements
ul2.writebacks                27461 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8434 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8425 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0069 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             109017911 # total number of accesses
itlb.hits                 109017891 # total number of hits
itlb.misses                      20 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              30483990 # total number of accesses
dtlb.hits                  28415451 # total number of hits
dtlb.misses                 2068539 # total number of misses
dtlb.replacements           2068411 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0679 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0679 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              251062 # total first level page table misses
mem.ptab_accesses        1145539674 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 2048 ../../exe/ammp.exe 

sim: simulation started @ Fri Oct 25 20:20:31 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               30101334 # total number of loads and stores committed
sim_num_loads              23145477 # total number of loads committed
sim_num_stores         6955857.0000 # total number of stores committed
sim_num_branches           20651019 # total number of branches committed
sim_elapsed_time                 35 # total simulation time in seconds
sim_inst_rate          2857142.8857 # simulation speed (in insts/sec)
sim_total_insn            105774310 # total number of instructions executed
sim_total_refs             31151133 # total number of loads and stores executed
sim_total_loads            24103997 # total number of loads executed
sim_total_stores       7047136.0000 # total number of stores executed
sim_total_branches         21748443 # total number of branches executed
sim_cycle                 143256207 # total simulation time in cycles
sim_IPC                      0.6981 # instructions per cycle
sim_CPI                      1.4326 # cycles per instruction
sim_exec_BW                  0.7384 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                 541291355 # cumulative IFQ occupancy
IFQ_fcount                131234592 # cumulative IFQ full count
ifq_occupancy                3.7785 # avg IFQ occupancy (insn's)
ifq_rate                     0.7384 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  5.1174 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9161 # fraction of time (cycle's) IFQ was full
RUU_count                2152681995 # cumulative RUU occupancy
RUU_fcount                119235179 # cumulative RUU full count
ruu_occupancy               15.0268 # avg RUU occupancy (insn's)
ruu_rate                     0.7384 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 20.3517 # avg RUU occupant latency (cycle's)
ruu_full                     0.8323 # fraction of time (cycle's) RUU was full
LSQ_count                 963830592 # cumulative LSQ occupancy
LSQ_fcount                106271396 # cumulative LSQ full count
lsq_occupancy                6.7280 # avg LSQ occupancy (insn's)
lsq_rate                     0.7384 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  9.1121 # avg LSQ occupant latency (cycle's)
lsq_full                     0.7418 # fraction of time (cycle's) LSQ was full
sim_slip                 3227446733 # total number of slip cycles
avg_sim_slip                32.2745 # the average slip between issue and retirement
bpred_bimod.lookups        22068848 # total number of bpred lookups
bpred_bimod.updates        20651018 # total number of updates
bpred_bimod.addr_hits      19960443 # total number of address-predicted hits
bpred_bimod.dir_hits       19966708 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           684310 # total number of misses
bpred_bimod.jr_hits         1138682 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1144770 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9666 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9669 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9947 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1242277 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1146966 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1141705 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1135622 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9947 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              108819033 # total number of accesses
il1.hits                  108259092 # total number of hits
il1.misses                   559941 # total number of misses
il1.replacements             559630 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0051 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0051 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               27048638 # total number of accesses
dl1.hits                   23692132 # total number of hits
dl1.misses                  3356506 # total number of misses
dl1.replacements            3355994 # total number of replacements
dl1.writebacks                43877 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1241 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1241 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3960324 # total number of accesses
ul2.hits                     618983 # total number of hits
ul2.misses                  3341341 # total number of misses
ul2.replacements            3337969 # total number of replacements
ul2.writebacks                27470 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.8437 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.8429 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0069 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             108819033 # total number of accesses
itlb.hits                 108819013 # total number of hits
itlb.misses                      20 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              30456297 # total number of accesses
dtlb.hits                  28387734 # total number of hits
dtlb.misses                 2068563 # total number of misses
dtlb.replacements           2068435 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0679 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0679 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              251036 # total first level page table misses
mem.ptab_accesses        1144972682 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 8 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:21:06 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     8 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 24 # total simulation time in seconds
sim_inst_rate          4166666.6667 # simulation speed (in insts/sec)
sim_total_insn            101400181 # total number of instructions executed
sim_total_refs             25662614 # total number of loads and stores executed
sim_total_loads            21852089 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2604910 # total number of branches executed
sim_cycle                  94975844 # total simulation time in cycles
sim_IPC                      1.0529 # instructions per cycle
sim_CPI                      0.9498 # cycles per instruction
sim_exec_BW                  1.0676 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 372269486 # cumulative IFQ occupancy
IFQ_fcount                 92190695 # cumulative IFQ full count
ifq_occupancy                3.9196 # avg IFQ occupancy (insn's)
ifq_rate                     1.0676 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.6713 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9707 # fraction of time (cycle's) IFQ was full
RUU_count                1466167443 # cumulative RUU occupancy
RUU_fcount                 80827840 # cumulative RUU full count
ruu_occupancy               15.4373 # avg RUU occupancy (insn's)
ruu_rate                     1.0676 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.4592 # avg RUU occupant latency (cycle's)
ruu_full                     0.8510 # fraction of time (cycle's) RUU was full
LSQ_count                 363459604 # cumulative LSQ occupancy
LSQ_fcount                  7541676 # cumulative LSQ full count
lsq_occupancy                3.8269 # avg LSQ occupancy (insn's)
lsq_rate                     1.0676 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.5844 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0794 # fraction of time (cycle's) LSQ was full
sim_slip                 1951303636 # total number of slip cycles
avg_sim_slip                19.5130 # the average slip between issue and retirement
bpred_bimod.lookups         2607219 # total number of bpred lookups
bpred_bimod.updates         2600443 # total number of updates
bpred_bimod.addr_hits       2191883 # total number of address-predicted hits
bpred_bimod.dir_hits        2191890 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           408553 # total number of misses
bpred_bimod.jr_hits               0 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen               0 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8429 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8429 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP            0 # total number of RAS predictions used
bpred_bimod.ras_hits.PP            0 # total number of RAS hits
bpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              103025527 # total number of accesses
il1.hits                  103025441 # total number of hits
il1.misses                       86 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24754019 # total number of accesses
dl1.hits                   24588272 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330695 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83851 # total number of misses
ul2.replacements              79755 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             103025527 # total number of accesses
itlb.hits                 103025525 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24754058 # total number of accesses
dtlb.hits                  24752706 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1119715632 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 32 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:21:30 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     32 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 29 # total simulation time in seconds
sim_inst_rate          3448275.8621 # simulation speed (in insts/sec)
sim_total_insn            101384494 # total number of instructions executed
sim_total_refs             25662578 # total number of loads and stores executed
sim_total_loads            21852053 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2600450 # total number of branches executed
sim_cycle                  94971773 # total simulation time in cycles
sim_IPC                      1.0529 # instructions per cycle
sim_CPI                      0.9497 # cycles per instruction
sim_exec_BW                  1.0675 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 372312540 # cumulative IFQ occupancy
IFQ_fcount                 92199774 # cumulative IFQ full count
ifq_occupancy                3.9202 # avg IFQ occupancy (insn's)
ifq_rate                     1.0675 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.6723 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9708 # fraction of time (cycle's) IFQ was full
RUU_count                1466205502 # cumulative RUU occupancy
RUU_fcount                 80841532 # cumulative RUU full count
ruu_occupancy               15.4383 # avg RUU occupancy (insn's)
ruu_rate                     1.0675 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.4618 # avg RUU occupant latency (cycle's)
ruu_full                     0.8512 # fraction of time (cycle's) RUU was full
LSQ_count                 363500931 # cumulative LSQ occupancy
LSQ_fcount                  7541754 # cumulative LSQ full count
lsq_occupancy                3.8275 # avg LSQ occupancy (insn's)
lsq_rate                     1.0675 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.5854 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0794 # fraction of time (cycle's) LSQ was full
sim_slip                 1951407422 # total number of slip cycles
avg_sim_slip                19.5141 # the average slip between issue and retirement
bpred_bimod.lookups         2602720 # total number of bpred lookups
bpred_bimod.updates         2600443 # total number of updates
bpred_bimod.addr_hits       2196383 # total number of address-predicted hits
bpred_bimod.dir_hits        2196390 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           404053 # total number of misses
bpred_bimod.jr_hits               0 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen               0 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8446 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8446 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP            0 # total number of RAS predictions used
bpred_bimod.ras_hits.PP            0 # total number of RAS hits
bpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              102991837 # total number of accesses
il1.hits                  102991750 # total number of hits
il1.misses                       87 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24754020 # total number of accesses
dl1.hits                   24588273 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330696 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83852 # total number of misses
ul2.replacements              79756 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             102991837 # total number of accesses
itlb.hits                 102991835 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24754059 # total number of accesses
dtlb.hits                  24752707 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1119648180 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 128 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:22:00 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     128 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 16 # total simulation time in seconds
sim_inst_rate          6250000.0000 # simulation speed (in insts/sec)
sim_total_insn            101384494 # total number of instructions executed
sim_total_refs             25662578 # total number of loads and stores executed
sim_total_loads            21852053 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2600450 # total number of branches executed
sim_cycle                  94971773 # total simulation time in cycles
sim_IPC                      1.0529 # instructions per cycle
sim_CPI                      0.9497 # cycles per instruction
sim_exec_BW                  1.0675 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 372312540 # cumulative IFQ occupancy
IFQ_fcount                 92199774 # cumulative IFQ full count
ifq_occupancy                3.9202 # avg IFQ occupancy (insn's)
ifq_rate                     1.0675 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.6723 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9708 # fraction of time (cycle's) IFQ was full
RUU_count                1466205502 # cumulative RUU occupancy
RUU_fcount                 80841532 # cumulative RUU full count
ruu_occupancy               15.4383 # avg RUU occupancy (insn's)
ruu_rate                     1.0675 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.4618 # avg RUU occupant latency (cycle's)
ruu_full                     0.8512 # fraction of time (cycle's) RUU was full
LSQ_count                 363500931 # cumulative LSQ occupancy
LSQ_fcount                  7541754 # cumulative LSQ full count
lsq_occupancy                3.8275 # avg LSQ occupancy (insn's)
lsq_rate                     1.0675 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.5854 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0794 # fraction of time (cycle's) LSQ was full
sim_slip                 1951407422 # total number of slip cycles
avg_sim_slip                19.5141 # the average slip between issue and retirement
bpred_bimod.lookups         2602720 # total number of bpred lookups
bpred_bimod.updates         2600443 # total number of updates
bpred_bimod.addr_hits       2196383 # total number of address-predicted hits
bpred_bimod.dir_hits        2196390 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           404053 # total number of misses
bpred_bimod.jr_hits               0 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen               0 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8446 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8446 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP            0 # total number of RAS predictions used
bpred_bimod.ras_hits.PP            0 # total number of RAS hits
bpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              102991837 # total number of accesses
il1.hits                  102991750 # total number of hits
il1.misses                       87 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24754020 # total number of accesses
dl1.hits                   24588273 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330696 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83852 # total number of misses
ul2.replacements              79756 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             102991837 # total number of accesses
itlb.hits                 102991835 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24754059 # total number of accesses
dtlb.hits                  24752707 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1119648180 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 512 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:22:16 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     512 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 18 # total simulation time in seconds
sim_inst_rate          5555555.5556 # simulation speed (in insts/sec)
sim_total_insn            101380026 # total number of instructions executed
sim_total_refs             25660346 # total number of loads and stores executed
sim_total_loads            21849821 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2600449 # total number of branches executed
sim_cycle                  94967614 # total simulation time in cycles
sim_IPC                      1.0530 # instructions per cycle
sim_CPI                      0.9497 # cycles per instruction
sim_exec_BW                  1.0675 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 372341529 # cumulative IFQ occupancy
IFQ_fcount                 92206465 # cumulative IFQ full count
ifq_occupancy                3.9207 # avg IFQ occupancy (insn's)
ifq_rate                     1.0675 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.6727 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9709 # fraction of time (cycle's) IFQ was full
RUU_count                1466287984 # cumulative RUU occupancy
RUU_fcount                 80852683 # cumulative RUU full count
ruu_occupancy               15.4399 # avg RUU occupancy (insn's)
ruu_rate                     1.0675 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.4633 # avg RUU occupant latency (cycle's)
ruu_full                     0.8514 # fraction of time (cycle's) RUU was full
LSQ_count                 363549988 # cumulative LSQ occupancy
LSQ_fcount                  7546216 # cumulative LSQ full count
lsq_occupancy                3.8281 # avg LSQ occupancy (insn's)
lsq_rate                     1.0675 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.5860 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0795 # fraction of time (cycle's) LSQ was full
sim_slip                 1951550126 # total number of slip cycles
avg_sim_slip                19.5155 # the average slip between issue and retirement
bpred_bimod.lookups         2600488 # total number of bpred lookups
bpred_bimod.updates         2600443 # total number of updates
bpred_bimod.addr_hits       2200844 # total number of address-predicted hits
bpred_bimod.dir_hits        2200852 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           399591 # total number of misses
bpred_bimod.jr_hits               0 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen               0 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8463 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8463 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP            0 # total number of RAS predictions used
bpred_bimod.ras_hits.PP            0 # total number of RAS hits
bpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              102978445 # total number of accesses
il1.hits                  102978358 # total number of hits
il1.misses                       87 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24754020 # total number of accesses
dl1.hits                   24588273 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330696 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83852 # total number of misses
ul2.replacements              79756 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             102978445 # total number of accesses
itlb.hits                 102978443 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24754059 # total number of accesses
dtlb.hits                  24752707 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1119616932 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 2048 -mem:width 32 -mem:lat 300 2 ../../exe/applu.exe 

sim: simulation started @ Fri Oct 25 20:22:34 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               24753981 # total number of loads and stores committed
sim_num_loads              20943495 # total number of loads committed
sim_num_stores         3810486.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 19 # total simulation time in seconds
sim_inst_rate          5263157.8947 # simulation speed (in insts/sec)
sim_total_insn            101380026 # total number of instructions executed
sim_total_refs             25660346 # total number of loads and stores executed
sim_total_loads            21849821 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2600449 # total number of branches executed
sim_cycle                  94967614 # total simulation time in cycles
sim_IPC                      1.0530 # instructions per cycle
sim_CPI                      0.9497 # cycles per instruction
sim_exec_BW                  1.0675 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 372341529 # cumulative IFQ occupancy
IFQ_fcount                 92206465 # cumulative IFQ full count
ifq_occupancy                3.9207 # avg IFQ occupancy (insn's)
ifq_rate                     1.0675 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  3.6727 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9709 # fraction of time (cycle's) IFQ was full
RUU_count                1466287984 # cumulative RUU occupancy
RUU_fcount                 80852683 # cumulative RUU full count
ruu_occupancy               15.4399 # avg RUU occupancy (insn's)
ruu_rate                     1.0675 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 14.4633 # avg RUU occupant latency (cycle's)
ruu_full                     0.8514 # fraction of time (cycle's) RUU was full
LSQ_count                 363549988 # cumulative LSQ occupancy
LSQ_fcount                  7546216 # cumulative LSQ full count
lsq_occupancy                3.8281 # avg LSQ occupancy (insn's)
lsq_rate                     1.0675 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  3.5860 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0795 # fraction of time (cycle's) LSQ was full
sim_slip                 1951550126 # total number of slip cycles
avg_sim_slip                19.5155 # the average slip between issue and retirement
bpred_bimod.lookups         2600488 # total number of bpred lookups
bpred_bimod.updates         2600443 # total number of updates
bpred_bimod.addr_hits       2200844 # total number of address-predicted hits
bpred_bimod.dir_hits        2200852 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           399591 # total number of misses
bpred_bimod.jr_hits               0 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen               0 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8463 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8463 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP            0 # total number of RAS predictions used
bpred_bimod.ras_hits.PP            0 # total number of RAS hits
bpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              102978445 # total number of accesses
il1.hits                  102978358 # total number of hits
il1.misses                       87 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24754020 # total number of accesses
dl1.hits                   24588273 # total number of hits
dl1.misses                   165747 # total number of misses
dl1.replacements             165235 # total number of replacements
dl1.writebacks               164862 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0067 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 330696 # total number of accesses
ul2.hits                     246844 # total number of hits
ul2.misses                    83852 # total number of misses
ul2.replacements              79756 # total number of replacements
ul2.writebacks                79618 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2536 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2412 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.2408 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             102978445 # total number of accesses
itlb.hits                 102978443 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24754059 # total number of accesses
dtlb.hits                  24752707 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1119616932 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 8 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:22:53 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     8 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 40 # total simulation time in seconds
sim_inst_rate          2500000.0250 # simulation speed (in insts/sec)
sim_total_insn            111478697 # total number of instructions executed
sim_total_refs             50876702 # total number of loads and stores executed
sim_total_loads            30250448 # total number of loads executed
sim_total_stores       20626254.0000 # total number of stores executed
sim_total_branches         11977937 # total number of branches executed
sim_cycle                  83560530 # total simulation time in cycles
sim_IPC                      1.1967 # instructions per cycle
sim_CPI                      0.8356 # cycles per instruction
sim_exec_BW                  1.3341 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 172919080 # cumulative IFQ occupancy
IFQ_fcount                 39127139 # cumulative IFQ full count
ifq_occupancy                2.0694 # avg IFQ occupancy (insn's)
ifq_rate                     1.3341 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5511 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4682 # fraction of time (cycle's) IFQ was full
RUU_count                 637929313 # cumulative RUU occupancy
RUU_fcount                 10872920 # cumulative RUU full count
ruu_occupancy                7.6343 # avg RUU occupancy (insn's)
ruu_rate                     1.3341 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.7224 # avg RUU occupant latency (cycle's)
ruu_full                     0.1301 # fraction of time (cycle's) RUU was full
LSQ_count                 290163470 # cumulative LSQ occupancy
LSQ_fcount                 14155540 # cumulative LSQ full count
lsq_occupancy                3.4725 # avg LSQ occupancy (insn's)
lsq_rate                     1.3341 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.6029 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1694 # fraction of time (cycle's) LSQ was full
sim_slip                 1022979138 # total number of slip cycles
avg_sim_slip                10.2298 # the average slip between issue and retirement
bpred_bimod.lookups        12491550 # total number of bpred lookups
bpred_bimod.updates        10337354 # total number of updates
bpred_bimod.addr_hits       7998685 # total number of address-predicted hits
bpred_bimod.dir_hits        8232948 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          2104406 # total number of misses
bpred_bimod.jr_hits         1465656 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1699748 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.7738 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.7964 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8623 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1350868 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1636698 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1270358 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1123644 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.8845 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              121706035 # total number of accesses
il1.hits                  116576565 # total number of hits
il1.misses                  5129470 # total number of misses
il1.replacements            5129067 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0421 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0421 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               46994628 # total number of accesses
dl1.hits                   46879279 # total number of hits
dl1.misses                   115349 # total number of misses
dl1.replacements             114837 # total number of replacements
dl1.writebacks                42592 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0024 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                5287411 # total number of accesses
ul2.hits                    5285292 # total number of hits
ul2.misses                     2119 # total number of misses
ul2.replacements                772 # total number of replacements
ul2.writebacks                  165 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0004 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             121706035 # total number of accesses
itlb.hits                 121705999 # total number of hits
itlb.misses                      36 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              47398309 # total number of accesses
dtlb.hits                  47398258 # total number of hits
dtlb.misses                      51 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              225441 # total first level page table misses
mem.ptab_accesses        1728060398 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 32 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:23:33 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     32 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 38 # total simulation time in seconds
sim_inst_rate          2631578.9474 # simulation speed (in insts/sec)
sim_total_insn            109162847 # total number of instructions executed
sim_total_refs             49908628 # total number of loads and stores executed
sim_total_loads            29401520 # total number of loads executed
sim_total_stores       20507108.0000 # total number of stores executed
sim_total_branches         11454904 # total number of branches executed
sim_cycle                  81823385 # total simulation time in cycles
sim_IPC                      1.2221 # instructions per cycle
sim_CPI                      0.8182 # cycles per instruction
sim_exec_BW                  1.3341 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 171660000 # cumulative IFQ occupancy
IFQ_fcount                 38988296 # cumulative IFQ full count
ifq_occupancy                2.0979 # avg IFQ occupancy (insn's)
ifq_rate                     1.3341 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5725 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4765 # fraction of time (cycle's) IFQ was full
RUU_count                 631194103 # cumulative RUU occupancy
RUU_fcount                 10595274 # cumulative RUU full count
ruu_occupancy                7.7141 # avg RUU occupancy (insn's)
ruu_rate                     1.3341 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.7821 # avg RUU occupant latency (cycle's)
ruu_full                     0.1295 # fraction of time (cycle's) RUU was full
LSQ_count                 288644221 # cumulative LSQ occupancy
LSQ_fcount                 14817117 # cumulative LSQ full count
lsq_occupancy                3.5276 # avg LSQ occupancy (insn's)
lsq_rate                     1.3341 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.6442 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1811 # fraction of time (cycle's) LSQ was full
sim_slip                 1026768032 # total number of slip cycles
avg_sim_slip                10.2677 # the average slip between issue and retirement
bpred_bimod.lookups        11817556 # total number of bpred lookups
bpred_bimod.updates        10337354 # total number of updates
bpred_bimod.addr_hits       8263081 # total number of address-predicted hits
bpred_bimod.dir_hits        8497269 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          1840085 # total number of misses
bpred_bimod.jr_hits         1465739 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1699748 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.7993 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8220 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8623 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1313318 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1497259 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1270358 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1123727 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.8846 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              118701959 # total number of accesses
il1.hits                  113681579 # total number of hits
il1.misses                  5020380 # total number of misses
il1.replacements            5019978 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0423 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0423 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               46494411 # total number of accesses
dl1.hits                   46379161 # total number of hits
dl1.misses                   115250 # total number of misses
dl1.replacements             114738 # total number of replacements
dl1.writebacks                42585 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0025 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                5178215 # total number of accesses
ul2.hits                    5176499 # total number of hits
ul2.misses                     1716 # total number of misses
ul2.replacements                370 # total number of replacements
ul2.writebacks                   70 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0003 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             118701959 # total number of accesses
itlb.hits                 118701924 # total number of hits
itlb.misses                      35 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              46898592 # total number of accesses
dtlb.hits                  46898542 # total number of hits
dtlb.misses                      50 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              225385 # total first level page table misses
mem.ptab_accesses        1718814134 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 128 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:24:11 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     128 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 49 # total simulation time in seconds
sim_inst_rate          2040816.3265 # simulation speed (in insts/sec)
sim_total_insn            107548934 # total number of instructions executed
sim_total_refs             48993037 # total number of loads and stores executed
sim_total_loads            28782746 # total number of loads executed
sim_total_stores       20210291.0000 # total number of stores executed
sim_total_branches         11198706 # total number of branches executed
sim_cycle                  79348734 # total simulation time in cycles
sim_IPC                      1.2603 # instructions per cycle
sim_CPI                      0.7935 # cycles per instruction
sim_exec_BW                  1.3554 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 169896025 # cumulative IFQ occupancy
IFQ_fcount                 38597004 # cumulative IFQ full count
ifq_occupancy                2.1411 # avg IFQ occupancy (insn's)
ifq_rate                     1.3554 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5797 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4864 # fraction of time (cycle's) IFQ was full
RUU_count                 631567351 # cumulative RUU occupancy
RUU_fcount                 10864540 # cumulative RUU full count
ruu_occupancy                7.9594 # avg RUU occupancy (insn's)
ruu_rate                     1.3554 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.8724 # avg RUU occupant latency (cycle's)
ruu_full                     0.1369 # fraction of time (cycle's) RUU was full
LSQ_count                 288785437 # cumulative LSQ occupancy
LSQ_fcount                 15031002 # cumulative LSQ full count
lsq_occupancy                3.6394 # avg LSQ occupancy (insn's)
lsq_rate                     1.3554 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.6852 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1894 # fraction of time (cycle's) LSQ was full
sim_slip                 1033526448 # total number of slip cycles
avg_sim_slip                10.3353 # the average slip between issue and retirement
bpred_bimod.lookups        11523161 # total number of bpred lookups
bpred_bimod.updates        10337354 # total number of updates
bpred_bimod.addr_hits       8860455 # total number of address-predicted hits
bpred_bimod.dir_hits        9037070 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          1300284 # total number of misses
bpred_bimod.jr_hits         1523306 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1699748 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8571 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8742 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8962 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1306451 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1403231 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1270358 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1181294 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9299 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              116461363 # total number of accesses
il1.hits                  111494950 # total number of hits
il1.misses                  4966413 # total number of misses
il1.replacements            4966012 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0426 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0426 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               46335306 # total number of accesses
dl1.hits                   46219883 # total number of hits
dl1.misses                   115423 # total number of misses
dl1.replacements             114911 # total number of replacements
dl1.writebacks                42596 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0025 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                5124432 # total number of accesses
ul2.hits                    5122655 # total number of hits
ul2.misses                     1777 # total number of misses
ul2.replacements                430 # total number of replacements
ul2.writebacks                   70 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0003 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             116461363 # total number of accesses
itlb.hits                 116461326 # total number of hits
itlb.misses                      37 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              46775500 # total number of accesses
dtlb.hits                  46775450 # total number of hits
dtlb.misses                      50 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              202372 # total first level page table misses
mem.ptab_accesses        1712736792 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 512 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:25:00 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     512 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 43 # total simulation time in seconds
sim_inst_rate          2325581.3953 # simulation speed (in insts/sec)
sim_total_insn            106327098 # total number of instructions executed
sim_total_refs             48281289 # total number of loads and stores executed
sim_total_loads            28157315 # total number of loads executed
sim_total_stores       20123974.0000 # total number of stores executed
sim_total_branches         11165276 # total number of branches executed
sim_cycle                  77148218 # total simulation time in cycles
sim_IPC                      1.2962 # instructions per cycle
sim_CPI                      0.7715 # cycles per instruction
sim_exec_BW                  1.3782 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 167901109 # cumulative IFQ occupancy
IFQ_fcount                 38098477 # cumulative IFQ full count
ifq_occupancy                2.1763 # avg IFQ occupancy (insn's)
ifq_rate                     1.3782 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5791 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4938 # fraction of time (cycle's) IFQ was full
RUU_count                 632449223 # cumulative RUU occupancy
RUU_fcount                 11426941 # cumulative RUU full count
ruu_occupancy                8.1978 # avg RUU occupancy (insn's)
ruu_rate                     1.3782 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.9481 # avg RUU occupant latency (cycle's)
ruu_full                     0.1481 # fraction of time (cycle's) RUU was full
LSQ_count                 287605921 # cumulative LSQ occupancy
LSQ_fcount                 14670620 # cumulative LSQ full count
lsq_occupancy                3.7280 # avg LSQ occupancy (insn's)
lsq_rate                     1.3782 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.7049 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1902 # fraction of time (cycle's) LSQ was full
sim_slip                 1038373657 # total number of slip cycles
avg_sim_slip                10.3837 # the average slip between issue and retirement
bpred_bimod.lookups        11457130 # total number of bpred lookups
bpred_bimod.updates        10337354 # total number of updates
bpred_bimod.addr_hits       9306745 # total number of address-predicted hits
bpred_bimod.dir_hits        9483363 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           853991 # total number of misses
bpred_bimod.jr_hits         1523306 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1699748 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9003 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9174 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8962 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1285610 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1371643 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1270358 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1181294 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9299 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              114773606 # total number of accesses
il1.hits                  109904456 # total number of hits
il1.misses                  4869150 # total number of misses
il1.replacements            4868749 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0424 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0424 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               46126391 # total number of accesses
dl1.hits                   46011180 # total number of hits
dl1.misses                   115211 # total number of misses
dl1.replacements             114699 # total number of replacements
dl1.writebacks                42593 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0025 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                5026954 # total number of accesses
ul2.hits                    5025184 # total number of hits
ul2.misses                     1770 # total number of misses
ul2.replacements                425 # total number of replacements
ul2.writebacks                   67 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0004 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             114773606 # total number of accesses
itlb.hits                 114773570 # total number of hits
itlb.misses                      36 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              46575244 # total number of accesses
dtlb.hits                  46575194 # total number of hits
dtlb.misses                      50 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              202102 # total first level page table misses
mem.ptab_accesses        1707089832 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 2048 -mem:width 32 -mem:lat 300 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Fri Oct 25 20:25:43 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               45809995 # total number of loads and stores committed
sim_num_loads              26441675 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 44 # total simulation time in seconds
sim_inst_rate          2272727.2727 # simulation speed (in insts/sec)
sim_total_insn            105961546 # total number of instructions executed
sim_total_refs             48114594 # total number of loads and stores executed
sim_total_loads            28030423 # total number of loads executed
sim_total_stores       20084171.0000 # total number of stores executed
sim_total_branches         11119905 # total number of branches executed
sim_cycle                  76569183 # total simulation time in cycles
sim_IPC                      1.3060 # instructions per cycle
sim_CPI                      0.7657 # cycles per instruction
sim_exec_BW                  1.3839 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 167711075 # cumulative IFQ occupancy
IFQ_fcount                 38092772 # cumulative IFQ full count
ifq_occupancy                2.1903 # avg IFQ occupancy (insn's)
ifq_rate                     1.3839 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5828 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4975 # fraction of time (cycle's) IFQ was full
RUU_count                 631151661 # cumulative RUU occupancy
RUU_fcount                 11544036 # cumulative RUU full count
ruu_occupancy                8.2429 # avg RUU occupancy (insn's)
ruu_rate                     1.3839 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.9564 # avg RUU occupant latency (cycle's)
ruu_full                     0.1508 # fraction of time (cycle's) RUU was full
LSQ_count                 287701936 # cumulative LSQ occupancy
LSQ_fcount                 14681783 # cumulative LSQ full count
lsq_occupancy                3.7574 # avg LSQ occupancy (insn's)
lsq_rate                     1.3839 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.7152 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1917 # fraction of time (cycle's) LSQ was full
sim_slip                 1040270705 # total number of slip cycles
avg_sim_slip                10.4027 # the average slip between issue and retirement
bpred_bimod.lookups        11392075 # total number of bpred lookups
bpred_bimod.updates        10337354 # total number of updates
bpred_bimod.addr_hits       9366313 # total number of address-predicted hits
bpred_bimod.dir_hits        9542933 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           794421 # total number of misses
bpred_bimod.jr_hits         1523306 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1699748 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9061 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9232 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8962 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1273765 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1361920 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1270358 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1181294 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9299 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              114207319 # total number of accesses
il1.hits                  109385605 # total number of hits
il1.misses                  4821714 # total number of misses
il1.replacements            4821313 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0422 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0422 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               46058460 # total number of accesses
dl1.hits                   45943249 # total number of hits
dl1.misses                   115211 # total number of misses
dl1.replacements             114699 # total number of replacements
dl1.writebacks                42593 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0025 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0025 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                4979518 # total number of accesses
ul2.hits                    4977749 # total number of hits
ul2.misses                     1769 # total number of misses
ul2.replacements                425 # total number of replacements
ul2.writebacks                   67 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0004 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             114207319 # total number of accesses
itlb.hits                 114207283 # total number of hits
itlb.misses                      36 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              46507313 # total number of accesses
dtlb.hits                  46507263 # total number of hits
dtlb.misses                      50 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              202102 # total first level page table misses
mem.ptab_accesses        1705543714 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 8 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:26:27 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     8 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 37 # total simulation time in seconds
sim_inst_rate          2702702.7297 # simulation speed (in insts/sec)
sim_total_insn            119134550 # total number of instructions executed
sim_total_refs             39894583 # total number of loads and stores executed
sim_total_loads            30640142 # total number of loads executed
sim_total_stores       9254441.0000 # total number of stores executed
sim_total_branches         19887289 # total number of branches executed
sim_cycle                  77713292 # total simulation time in cycles
sim_IPC                      1.2868 # instructions per cycle
sim_CPI                      0.7771 # cycles per instruction
sim_exec_BW                  1.5330 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 152725755 # cumulative IFQ occupancy
IFQ_fcount                 32735762 # cumulative IFQ full count
ifq_occupancy                1.9652 # avg IFQ occupancy (insn's)
ifq_rate                     1.5330 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.2820 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4212 # fraction of time (cycle's) IFQ was full
RUU_count                 595008385 # cumulative RUU occupancy
RUU_fcount                 13636445 # cumulative RUU full count
ruu_occupancy                7.6565 # avg RUU occupancy (insn's)
ruu_rate                     1.5330 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  4.9944 # avg RUU occupant latency (cycle's)
ruu_full                     0.1755 # fraction of time (cycle's) RUU was full
LSQ_count                 204166773 # cumulative LSQ occupancy
LSQ_fcount                  2653830 # cumulative LSQ full count
lsq_occupancy                2.6272 # avg LSQ occupancy (insn's)
lsq_rate                     1.5330 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.7137 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0341 # fraction of time (cycle's) LSQ was full
sim_slip                  854970327 # total number of slip cycles
avg_sim_slip                 8.5497 # the average slip between issue and retirement
bpred_bimod.lookups        20885879 # total number of bpred lookups
bpred_bimod.updates        16535689 # total number of updates
bpred_bimod.addr_hits      11807403 # total number of address-predicted hits
bpred_bimod.dir_hits       11915314 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          4620375 # total number of misses
bpred_bimod.jr_hits         2630395 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         2767615 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.7141 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.7206 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9504 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      3213834 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      2781037 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      2492965 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      2385178 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9568 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              124427334 # total number of accesses
il1.hits                  121031846 # total number of hits
il1.misses                  3395488 # total number of misses
il1.replacements            3395226 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0273 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0273 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               37090109 # total number of accesses
dl1.hits                   37068622 # total number of hits
dl1.misses                    21487 # total number of misses
dl1.replacements              20975 # total number of replacements
dl1.writebacks                10840 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3427815 # total number of accesses
ul2.hits                    3420662 # total number of hits
ul2.misses                     7153 # total number of misses
ul2.replacements               3057 # total number of replacements
ul2.writebacks                 2559 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0021 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0009 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0007 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             124427334 # total number of accesses
itlb.hits                 124427317 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              37253348 # total number of accesses
dtlb.hits                  37253225 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             8258599 # total first level page table misses
mem.ptab_accesses        1499852832 # total page table accesses
mem.ptab_miss_rate           0.0055 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 32 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:27:06 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     32 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 43 # total simulation time in seconds
sim_inst_rate          2325581.4186 # simulation speed (in insts/sec)
sim_total_insn            117422746 # total number of instructions executed
sim_total_refs             39700181 # total number of loads and stores executed
sim_total_loads            30269233 # total number of loads executed
sim_total_stores       9430948.0000 # total number of stores executed
sim_total_branches         19836513 # total number of branches executed
sim_cycle                  74106150 # total simulation time in cycles
sim_IPC                      1.3494 # instructions per cycle
sim_CPI                      0.7411 # cycles per instruction
sim_exec_BW                  1.5845 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 153199685 # cumulative IFQ occupancy
IFQ_fcount                 33163010 # cumulative IFQ full count
ifq_occupancy                2.0673 # avg IFQ occupancy (insn's)
ifq_rate                     1.5845 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3047 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4475 # fraction of time (cycle's) IFQ was full
RUU_count                 595212296 # cumulative RUU occupancy
RUU_fcount                 15396451 # cumulative RUU full count
ruu_occupancy                8.0319 # avg RUU occupancy (insn's)
ruu_rate                     1.5845 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.0690 # avg RUU occupant latency (cycle's)
ruu_full                     0.2078 # fraction of time (cycle's) RUU was full
LSQ_count                 209226856 # cumulative LSQ occupancy
LSQ_fcount                  3684931 # cumulative LSQ full count
lsq_occupancy                2.8233 # avg LSQ occupancy (insn's)
lsq_rate                     1.5845 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.7818 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0497 # fraction of time (cycle's) LSQ was full
sim_slip                  866230758 # total number of slip cycles
avg_sim_slip                 8.6623 # the average slip between issue and retirement
bpred_bimod.lookups        20781369 # total number of bpred lookups
bpred_bimod.updates        16535689 # total number of updates
bpred_bimod.addr_hits      12916664 # total number of address-predicted hits
bpred_bimod.dir_hits       12969848 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          3565841 # total number of misses
bpred_bimod.jr_hits         2685119 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         2767615 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.7811 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.7844 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9702 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      2973710 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      2787028 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      2492965 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      2439902 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9787 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              124246079 # total number of accesses
il1.hits                  120832025 # total number of hits
il1.misses                  3414054 # total number of misses
il1.replacements            3413793 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0275 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0275 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               37098101 # total number of accesses
dl1.hits                   37076636 # total number of hits
dl1.misses                    21465 # total number of misses
dl1.replacements              20953 # total number of replacements
dl1.writebacks                10840 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3446359 # total number of accesses
ul2.hits                    3439203 # total number of hits
ul2.misses                     7156 # total number of misses
ul2.replacements               3060 # total number of replacements
ul2.writebacks                 2561 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0021 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0009 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0007 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             124246079 # total number of accesses
itlb.hits                 124246062 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              37241737 # total number of accesses
dtlb.hits                  37241614 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             8096115 # total first level page table misses
mem.ptab_accesses        1497340088 # total page table accesses
mem.ptab_miss_rate           0.0054 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 128 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:27:49 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     128 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 40 # total simulation time in seconds
sim_inst_rate          2500000.0250 # simulation speed (in insts/sec)
sim_total_insn            110561794 # total number of instructions executed
sim_total_refs             38275856 # total number of loads and stores executed
sim_total_loads            29170640 # total number of loads executed
sim_total_stores       9105216.0000 # total number of stores executed
sim_total_branches         18727049 # total number of branches executed
sim_cycle                  65539793 # total simulation time in cycles
sim_IPC                      1.5258 # instructions per cycle
sim_CPI                      0.6554 # cycles per instruction
sim_exec_BW                  1.6869 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 144596454 # cumulative IFQ occupancy
IFQ_fcount                 31276647 # cumulative IFQ full count
ifq_occupancy                2.2062 # avg IFQ occupancy (insn's)
ifq_rate                     1.6869 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3078 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4772 # fraction of time (cycle's) IFQ was full
RUU_count                 581274889 # cumulative RUU occupancy
RUU_fcount                 15672178 # cumulative RUU full count
ruu_occupancy                8.8690 # avg RUU occupancy (insn's)
ruu_rate                     1.6869 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.2575 # avg RUU occupant latency (cycle's)
ruu_full                     0.2391 # fraction of time (cycle's) RUU was full
LSQ_count                 205968396 # cumulative LSQ occupancy
LSQ_fcount                  3704165 # cumulative LSQ full count
lsq_occupancy                3.1426 # avg LSQ occupancy (insn's)
lsq_rate                     1.6869 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.8629 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0565 # fraction of time (cycle's) LSQ was full
sim_slip                  878564974 # total number of slip cycles
avg_sim_slip                 8.7856 # the average slip between issue and retirement
bpred_bimod.lookups        19288391 # total number of bpred lookups
bpred_bimod.updates        16535689 # total number of updates
bpred_bimod.addr_hits      14475027 # total number of address-predicted hits
bpred_bimod.dir_hits       14475155 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          2060534 # total number of misses
bpred_bimod.jr_hits         2738174 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         2767615 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8754 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8754 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9894 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      2677869 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      2676949 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      2492965 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      2492957 # total number of RAS hits
bpred_bimod.ras_rate.PP    1.0000 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              116694570 # total number of accesses
il1.hits                  113488791 # total number of hits
il1.misses                  3205779 # total number of misses
il1.replacements            3205520 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0275 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0275 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               36290284 # total number of accesses
dl1.hits                   36268823 # total number of hits
dl1.misses                    21461 # total number of misses
dl1.replacements              20949 # total number of replacements
dl1.writebacks                10839 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3238079 # total number of accesses
ul2.hits                    3230927 # total number of hits
ul2.misses                     7152 # total number of misses
ul2.replacements               3056 # total number of replacements
ul2.writebacks                 2560 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0022 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0009 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0008 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             116694570 # total number of accesses
itlb.hits                 116694553 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              36453538 # total number of accesses
dtlb.hits                  36453415 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             7872297 # total first level page table misses
mem.ptab_accesses        1479005744 # total page table accesses
mem.ptab_miss_rate           0.0053 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 512 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:28:29 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     512 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 32 # total simulation time in seconds
sim_inst_rate          3125000.0312 # simulation speed (in insts/sec)
sim_total_insn            107548305 # total number of instructions executed
sim_total_refs             37736362 # total number of loads and stores executed
sim_total_loads            28733567 # total number of loads executed
sim_total_stores       9002795.0000 # total number of stores executed
sim_total_branches         17787551 # total number of branches executed
sim_cycle                  61058129 # total simulation time in cycles
sim_IPC                      1.6378 # instructions per cycle
sim_CPI                      0.6106 # cycles per instruction
sim_exec_BW                  1.7614 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 143881952 # cumulative IFQ occupancy
IFQ_fcount                 31106644 # cumulative IFQ full count
ifq_occupancy                2.3565 # avg IFQ occupancy (insn's)
ifq_rate                     1.7614 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3378 # avg IFQ occupant latency (cycle's)
ifq_full                     0.5095 # fraction of time (cycle's) IFQ was full
RUU_count                 580218443 # cumulative RUU occupancy
RUU_fcount                 16641273 # cumulative RUU full count
ruu_occupancy                9.5027 # avg RUU occupancy (insn's)
ruu_rate                     1.7614 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.3950 # avg RUU occupant latency (cycle's)
ruu_full                     0.2725 # fraction of time (cycle's) RUU was full
LSQ_count                 206241460 # cumulative LSQ occupancy
LSQ_fcount                  3937844 # cumulative LSQ full count
lsq_occupancy                3.3778 # avg LSQ occupancy (insn's)
lsq_rate                     1.7614 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.9177 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0645 # fraction of time (cycle's) LSQ was full
sim_slip                  886672962 # total number of slip cycles
avg_sim_slip                 8.8667 # the average slip between issue and retirement
bpred_bimod.lookups        18212608 # total number of bpred lookups
bpred_bimod.updates        16535689 # total number of updates
bpred_bimod.addr_hits      15487314 # total number of address-predicted hits
bpred_bimod.dir_hits       15487446 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          1048243 # total number of misses
bpred_bimod.jr_hits         2738174 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         2767615 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9366 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9366 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9894 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      2733108 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      2590857 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      2492965 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      2492957 # total number of RAS hits
bpred_bimod.ras_rate.PP    1.0000 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              112967820 # total number of accesses
il1.hits                  109871828 # total number of hits
il1.misses                  3095992 # total number of misses
il1.replacements            3095736 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0274 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0274 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               36179889 # total number of accesses
dl1.hits                   36158428 # total number of hits
dl1.misses                    21461 # total number of misses
dl1.replacements              20949 # total number of replacements
dl1.writebacks                10839 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3128292 # total number of accesses
ul2.hits                    3121143 # total number of hits
ul2.misses                     7149 # total number of misses
ul2.replacements               3053 # total number of replacements
ul2.writebacks                 2557 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0023 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0010 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0008 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             112967820 # total number of accesses
itlb.hits                 112967803 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              36343174 # total number of accesses
dtlb.hits                  36343051 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             7746659 # total first level page table misses
mem.ptab_accesses        1470524024 # total page table accesses
mem.ptab_miss_rate           0.0053 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 2048 -mem:width 32 -mem:lat 300 2 ../../exe/equake.exe 

sim: simulation started @ Fri Oct 25 20:29:01 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               35365793 # total number of loads and stores committed
sim_num_loads              26880458 # total number of loads committed
sim_num_stores         8485335.0000 # total number of stores committed
sim_num_branches           16535689 # total number of branches committed
sim_elapsed_time                 40 # total simulation time in seconds
sim_inst_rate          2500000.0250 # simulation speed (in insts/sec)
sim_total_insn            105650060 # total number of instructions executed
sim_total_refs             37045892 # total number of loads and stores executed
sim_total_loads            28248220 # total number of loads executed
sim_total_stores       8797672.0000 # total number of stores executed
sim_total_branches         17412423 # total number of branches executed
sim_cycle                  58891467 # total simulation time in cycles
sim_IPC                      1.6980 # instructions per cycle
sim_CPI                      0.5889 # cycles per instruction
sim_exec_BW                  1.7940 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 141526714 # cumulative IFQ occupancy
IFQ_fcount                 30591047 # cumulative IFQ full count
ifq_occupancy                2.4032 # avg IFQ occupancy (insn's)
ifq_rate                     1.7940 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3396 # avg IFQ occupant latency (cycle's)
ifq_full                     0.5194 # fraction of time (cycle's) IFQ was full
RUU_count                 577558514 # cumulative RUU occupancy
RUU_fcount                 17071497 # cumulative RUU full count
ruu_occupancy                9.8072 # avg RUU occupancy (insn's)
ruu_rate                     1.7940 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.4667 # avg RUU occupant latency (cycle's)
ruu_full                     0.2899 # fraction of time (cycle's) RUU was full
LSQ_count                 204851766 # cumulative LSQ occupancy
LSQ_fcount                  3913419 # cumulative LSQ full count
lsq_occupancy                3.4785 # avg LSQ occupancy (insn's)
lsq_rate                     1.7940 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.9390 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0665 # fraction of time (cycle's) LSQ was full
sim_slip                  890447139 # total number of slip cycles
avg_sim_slip                 8.9045 # the average slip between issue and retirement
bpred_bimod.lookups        17708721 # total number of bpred lookups
bpred_bimod.updates        16535689 # total number of updates
bpred_bimod.addr_hits      15938601 # total number of address-predicted hits
bpred_bimod.dir_hits       15938736 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           596953 # total number of misses
bpred_bimod.jr_hits         2738174 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         2767615 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9639 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9639 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9894 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      2615746 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      2502823 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      2492965 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      2492957 # total number of RAS hits
bpred_bimod.ras_rate.PP    1.0000 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              110187344 # total number of accesses
il1.hits                  107122212 # total number of hits
il1.misses                  3065132 # total number of misses
il1.replacements            3064877 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0278 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0278 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               36028620 # total number of accesses
dl1.hits                   36007159 # total number of hits
dl1.misses                    21461 # total number of misses
dl1.replacements              20949 # total number of replacements
dl1.writebacks                10839 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0006 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3097432 # total number of accesses
ul2.hits                    3090283 # total number of hits
ul2.misses                     7149 # total number of misses
ul2.replacements               3053 # total number of replacements
ul2.writebacks                 2555 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0023 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0010 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0008 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             110187344 # total number of accesses
itlb.hits                 110187327 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              36191874 # total number of accesses
dtlb.hits                  36191751 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             7760989 # total first level page table misses
mem.ptab_accesses        1463241696 # total page table accesses
mem.ptab_miss_rate           0.0053 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 8 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:29:41 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     8 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 36 # total simulation time in seconds
sim_inst_rate          2777777.8333 # simulation speed (in insts/sec)
sim_total_insn            133128912 # total number of instructions executed
sim_total_refs             31174836 # total number of loads and stores executed
sim_total_loads            26240007 # total number of loads executed
sim_total_stores       4934829.0000 # total number of stores executed
sim_total_branches         26286674 # total number of branches executed
sim_cycle                 100138441 # total simulation time in cycles
sim_IPC                      0.9986 # instructions per cycle
sim_CPI                      1.0014 # cycles per instruction
sim_exec_BW                  1.3294 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 280243970 # cumulative IFQ occupancy
IFQ_fcount                 63062046 # cumulative IFQ full count
ifq_occupancy                2.7986 # avg IFQ occupancy (insn's)
ifq_rate                     1.3294 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.1051 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6297 # fraction of time (cycle's) IFQ was full
RUU_count                1047152937 # cumulative RUU occupancy
RUU_fcount                 42047399 # cumulative RUU full count
ruu_occupancy               10.4571 # avg RUU occupancy (insn's)
ruu_rate                     1.3294 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  7.8657 # avg RUU occupant latency (cycle's)
ruu_full                     0.4199 # fraction of time (cycle's) RUU was full
LSQ_count                 276357604 # cumulative LSQ occupancy
LSQ_fcount                  4444631 # cumulative LSQ full count
lsq_occupancy                2.7598 # avg LSQ occupancy (insn's)
lsq_rate                     1.3294 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.0759 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0444 # fraction of time (cycle's) LSQ was full
sim_slip                 1270001393 # total number of slip cycles
avg_sim_slip                12.7000 # the average slip between issue and retirement
bpred_bimod.lookups        27970898 # total number of bpred lookups
bpred_bimod.updates        19702630 # total number of updates
bpred_bimod.addr_hits      14970117 # total number of address-predicted hits
bpred_bimod.dir_hits       15289957 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          4412673 # total number of misses
bpred_bimod.jr_hits         1089659 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1409179 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.7598 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.7760 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.7733 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1969754 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      2039967 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1395506 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1076005 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.7711 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              146516504 # total number of accesses
il1.hits                  144917263 # total number of hits
il1.misses                  1599241 # total number of misses
il1.replacements            1598786 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0109 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0109 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               25894370 # total number of accesses
dl1.hits                   25519240 # total number of hits
dl1.misses                   375130 # total number of misses
dl1.replacements             374618 # total number of replacements
dl1.writebacks               119033 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0145 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0145 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0046 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2093404 # total number of accesses
ul2.hits                    1973648 # total number of hits
ul2.misses                   119756 # total number of misses
ul2.replacements             115660 # total number of replacements
ul2.writebacks                47801 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0572 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0552 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0228 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             146516504 # total number of accesses
itlb.hits                 146516473 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              26017648 # total number of accesses
dtlb.hits                  25995559 # total number of hits
dtlb.misses                   22089 # total number of misses
dtlb.replacements             21961 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0008 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0008 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              251118 # total first level page table misses
mem.ptab_accesses        1081426212 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 32 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:30:18 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     32 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 39 # total simulation time in seconds
sim_inst_rate          2564102.6154 # simulation speed (in insts/sec)
sim_total_insn            126801581 # total number of instructions executed
sim_total_refs             29885963 # total number of loads and stores executed
sim_total_loads            24967834 # total number of loads executed
sim_total_stores       4918129.0000 # total number of stores executed
sim_total_branches         24963519 # total number of branches executed
sim_cycle                  94670250 # total simulation time in cycles
sim_IPC                      1.0563 # instructions per cycle
sim_CPI                      0.9467 # cycles per instruction
sim_exec_BW                  1.3394 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 275316123 # cumulative IFQ occupancy
IFQ_fcount                 62299527 # cumulative IFQ full count
ifq_occupancy                2.9082 # avg IFQ occupancy (insn's)
ifq_rate                     1.3394 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.1712 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6581 # fraction of time (cycle's) IFQ was full
RUU_count                1032460987 # cumulative RUU occupancy
RUU_fcount                 43026929 # cumulative RUU full count
ruu_occupancy               10.9059 # avg RUU occupancy (insn's)
ruu_rate                     1.3394 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  8.1423 # avg RUU occupant latency (cycle's)
ruu_full                     0.4545 # fraction of time (cycle's) RUU was full
LSQ_count                 272928520 # cumulative LSQ occupancy
LSQ_fcount                  4555576 # cumulative LSQ full count
lsq_occupancy                2.8829 # avg LSQ occupancy (insn's)
lsq_rate                     1.3394 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.1524 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0481 # fraction of time (cycle's) LSQ was full
sim_slip                 1292634378 # total number of slip cycles
avg_sim_slip                12.9263 # the average slip between issue and retirement
bpred_bimod.lookups        26626247 # total number of bpred lookups
bpred_bimod.updates        19702630 # total number of updates
bpred_bimod.addr_hits      16114803 # total number of address-predicted hits
bpred_bimod.dir_hits       16289954 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          3412676 # total number of misses
bpred_bimod.jr_hits         1234327 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1409179 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8179 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8268 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8759 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1767399 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      2101936 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1395506 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1220673 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.8747 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              138917892 # total number of accesses
il1.hits                  137300773 # total number of hits
il1.misses                  1617119 # total number of misses
il1.replacements            1616668 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0116 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0116 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               25211914 # total number of accesses
dl1.hits                   24839924 # total number of hits
dl1.misses                   371990 # total number of misses
dl1.replacements             371478 # total number of replacements
dl1.writebacks               118672 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0148 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0147 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0047 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2107781 # total number of accesses
ul2.hits                    1989345 # total number of hits
ul2.misses                   118436 # total number of misses
ul2.replacements             114340 # total number of replacements
ul2.writebacks                47740 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0562 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0542 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0226 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             138917892 # total number of accesses
itlb.hits                 138917861 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              25339365 # total number of accesses
dtlb.hits                  25317435 # total number of hits
dtlb.misses                   21930 # total number of misses
dtlb.replacements             21802 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0009 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0009 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              251032 # total first level page table misses
mem.ptab_accesses        1063567306 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 128 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:30:57 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     128 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 40 # total simulation time in seconds
sim_inst_rate          2500000.0500 # simulation speed (in insts/sec)
sim_total_insn            125716750 # total number of instructions executed
sim_total_refs             29309758 # total number of loads and stores executed
sim_total_loads            24595487 # total number of loads executed
sim_total_stores       4714271.0000 # total number of stores executed
sim_total_branches         24111032 # total number of branches executed
sim_cycle                  90843593 # total simulation time in cycles
sim_IPC                      1.1008 # instructions per cycle
sim_CPI                      0.9084 # cycles per instruction
sim_exec_BW                  1.3839 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 273870041 # cumulative IFQ occupancy
IFQ_fcount                 61902386 # cumulative IFQ full count
ifq_occupancy                3.0147 # avg IFQ occupancy (insn's)
ifq_rate                     1.3839 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.1785 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6814 # fraction of time (cycle's) IFQ was full
RUU_count                1033866900 # cumulative RUU occupancy
RUU_fcount                 45501160 # cumulative RUU full count
ruu_occupancy               11.3807 # avg RUU occupancy (insn's)
ruu_rate                     1.3839 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  8.2238 # avg RUU occupant latency (cycle's)
ruu_full                     0.5009 # fraction of time (cycle's) RUU was full
LSQ_count                 274545503 # cumulative LSQ occupancy
LSQ_fcount                  4407933 # cumulative LSQ full count
lsq_occupancy                3.0222 # avg LSQ occupancy (insn's)
lsq_rate                     1.3839 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.1838 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0485 # fraction of time (cycle's) LSQ was full
sim_slip                 1294811786 # total number of slip cycles
avg_sim_slip                12.9481 # the average slip between issue and retirement
bpred_bimod.lookups        25640771 # total number of bpred lookups
bpred_bimod.updates        19702630 # total number of updates
bpred_bimod.addr_hits      16951890 # total number of address-predicted hits
bpred_bimod.dir_hits       17013013 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          2689617 # total number of misses
bpred_bimod.jr_hits         1348374 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1409179 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8604 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8635 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9569 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1682809 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1710126 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1395506 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1334720 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9564 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              135345103 # total number of accesses
il1.hits                  133723389 # total number of hits
il1.misses                  1621714 # total number of misses
il1.replacements            1621265 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0120 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0120 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               25254400 # total number of accesses
dl1.hits                   24884056 # total number of hits
dl1.misses                   370344 # total number of misses
dl1.replacements             369832 # total number of replacements
dl1.writebacks               118098 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0147 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0146 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0047 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2110156 # total number of accesses
ul2.hits                    1991805 # total number of hits
ul2.misses                   118351 # total number of misses
ul2.replacements             114255 # total number of replacements
ul2.writebacks                47738 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0561 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0541 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0226 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             135345103 # total number of accesses
itlb.hits                 135345072 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              25396773 # total number of accesses
dtlb.hits                  25374829 # total number of hits
dtlb.misses                   21944 # total number of misses
dtlb.replacements             21816 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0009 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0009 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              250598 # total first level page table misses
mem.ptab_accesses        1050856444 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 512 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:31:37 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     512 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 36 # total simulation time in seconds
sim_inst_rate          2777777.8333 # simulation speed (in insts/sec)
sim_total_insn            128018013 # total number of instructions executed
sim_total_refs             29916735 # total number of loads and stores executed
sim_total_loads            25159458 # total number of loads executed
sim_total_stores       4757277.0000 # total number of stores executed
sim_total_branches         24968301 # total number of branches executed
sim_cycle                  92989830 # total simulation time in cycles
sim_IPC                      1.0754 # instructions per cycle
sim_CPI                      0.9299 # cycles per instruction
sim_exec_BW                  1.3767 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 277130744 # cumulative IFQ occupancy
IFQ_fcount                 62360299 # cumulative IFQ full count
ifq_occupancy                2.9802 # avg IFQ occupancy (insn's)
ifq_rate                     1.3767 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.1648 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6706 # fraction of time (cycle's) IFQ was full
RUU_count                1045415884 # cumulative RUU occupancy
RUU_fcount                 44488135 # cumulative RUU full count
ruu_occupancy               11.2423 # avg RUU occupancy (insn's)
ruu_rate                     1.3767 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  8.1662 # avg RUU occupant latency (cycle's)
ruu_full                     0.4784 # fraction of time (cycle's) RUU was full
LSQ_count                 275467314 # cumulative LSQ occupancy
LSQ_fcount                  4421859 # cumulative LSQ full count
lsq_occupancy                2.9623 # avg LSQ occupancy (insn's)
lsq_rate                     1.3767 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.1518 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0476 # fraction of time (cycle's) LSQ was full
sim_slip                 1299815246 # total number of slip cycles
avg_sim_slip                12.9982 # the average slip between issue and retirement
bpred_bimod.lookups        26456676 # total number of bpred lookups
bpred_bimod.updates        19702630 # total number of updates
bpred_bimod.addr_hits      16701257 # total number of address-predicted hits
bpred_bimod.dir_hits       16754423 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          2948207 # total number of misses
bpred_bimod.jr_hits         1356315 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1409179 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8477 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8504 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9625 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1605755 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1729841 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1395506 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1342661 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9621 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              139613058 # total number of accesses
il1.hits                  138009138 # total number of hits
il1.misses                  1603920 # total number of misses
il1.replacements            1603476 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0115 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0115 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               25540251 # total number of accesses
dl1.hits                   25170274 # total number of hits
dl1.misses                   369977 # total number of misses
dl1.replacements             369465 # total number of replacements
dl1.writebacks               118053 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0145 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0145 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0046 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2091950 # total number of accesses
ul2.hits                    1973664 # total number of hits
ul2.misses                   118286 # total number of misses
ul2.replacements             114190 # total number of replacements
ul2.writebacks                47729 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0565 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0546 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0228 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             139613058 # total number of accesses
itlb.hits                 139613027 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              25682621 # total number of accesses
dtlb.hits                  25661095 # total number of hits
dtlb.misses                   21526 # total number of misses
dtlb.replacements             21398 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0008 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0008 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              248424 # total first level page table misses
mem.ptab_accesses        1062262170 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -bpred bimod -bpred:bimod 2048 -mem:width 32 -mem:lat 300 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Fri Oct 25 20:32:13 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         300 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               23147907 # total number of loads and stores committed
sim_num_loads              18700740 # total number of loads committed
sim_num_stores         4447167.0000 # total number of stores committed
sim_num_branches           19702631 # total number of branches committed
sim_elapsed_time                 38 # total simulation time in seconds
sim_inst_rate          2631579.0000 # simulation speed (in insts/sec)
sim_total_insn            127062885 # total number of instructions executed
sim_total_refs             29764783 # total number of loads and stores executed
sim_total_loads            25031938 # total number of loads executed
sim_total_stores       4732845.0000 # total number of stores executed
sim_total_branches         24662480 # total number of branches executed
sim_cycle                  91612992 # total simulation time in cycles
sim_IPC                      1.0915 # instructions per cycle
sim_CPI                      0.9161 # cycles per instruction
sim_exec_BW                  1.3870 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 276003785 # cumulative IFQ occupancy
IFQ_fcount                 62178273 # cumulative IFQ full count
ifq_occupancy                3.0127 # avg IFQ occupancy (insn's)
ifq_rate                     1.3870 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.1722 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6787 # fraction of time (cycle's) IFQ was full
RUU_count                1044471197 # cumulative RUU occupancy
RUU_fcount                 44863708 # cumulative RUU full count
ruu_occupancy               11.4009 # avg RUU occupancy (insn's)
ruu_rate                     1.3870 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  8.2201 # avg RUU occupant latency (cycle's)
ruu_full                     0.4897 # fraction of time (cycle's) RUU was full
LSQ_count                 274888238 # cumulative LSQ occupancy
LSQ_fcount                  4397890 # cumulative LSQ full count
lsq_occupancy                3.0005 # avg LSQ occupancy (insn's)
lsq_rate                     1.3870 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.1634 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0480 # fraction of time (cycle's) LSQ was full
sim_slip                 1315232630 # total number of slip cycles
avg_sim_slip                13.1523 # the average slip between issue and retirement
bpred_bimod.lookups        26078568 # total number of bpred lookups
bpred_bimod.updates        19702630 # total number of updates
bpred_bimod.addr_hits      16894823 # total number of address-predicted hits
bpred_bimod.dir_hits       16947974 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          2754656 # total number of misses
bpred_bimod.jr_hits         1356320 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1409179 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8575 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8602 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9625 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1566353 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1612138 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1395506 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1342666 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9621 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              138069554 # total number of accesses
il1.hits                  136514359 # total number of hits
il1.misses                  1555195 # total number of misses
il1.replacements            1554751 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0113 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0113 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               25488450 # total number of accesses
dl1.hits                   25118479 # total number of hits
dl1.misses                   369971 # total number of misses
dl1.replacements             369459 # total number of replacements
dl1.writebacks               118053 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0145 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0145 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0046 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2043219 # total number of accesses
ul2.hits                    1924951 # total number of hits
ul2.misses                   118268 # total number of misses
ul2.replacements             114172 # total number of replacements
ul2.writebacks                47726 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0579 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0559 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0234 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             138069554 # total number of accesses
itlb.hits                 138069523 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              25630823 # total number of accesses
dtlb.hits                  25609297 # total number of hits
dtlb.misses                   21526 # total number of misses
dtlb.replacements             21398 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0008 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0008 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              248422 # total first level page table misses
mem.ptab_accesses        1058725184 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

