sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -cache:dl1 dl1:64:32:16:l -cache:il1 il1:64:32:16:l -cache:dl2 ul2:2048:64:16:l -fetch:ifqsize 6 -decode:width 4 -issue:width 14 -commit:width 8 -ruu:size 512 -lsq:size 128 -mem:lat 48 1 -mem:width 32 -res:ialu 6 -res:imult 2 -res:memport 2 -res:fpalu 2 -res:fpmult 2 ../../exe/ammp.exe 

sim: simulation started @ Wed Oct  9 20:02:56 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              6 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width               14 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               8 # instruction commit B/W (insts/cycle)
-ruu:size                 512 # register update unit (RUU) size
-lsq:size                 128 # load/store queue (LSQ) size
-cache:dl1       dl1:64:32:16:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:2048:64:16:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:64:32:16:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         48 1 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   6 # total number of integer ALU's available
-res:imult                  2 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  2 # total number of floating point ALU's available
-res:fpmult                 2 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               30101338 # total number of loads and stores committed
sim_num_loads              23145479 # total number of loads committed
sim_num_stores         6955859.0000 # total number of stores committed
sim_num_branches           20651020 # total number of branches committed
sim_elapsed_time                 67 # total simulation time in seconds
sim_inst_rate          1492537.3433 # simulation speed (in insts/sec)
sim_total_insn            110666656 # total number of instructions executed
sim_total_refs             32442529 # total number of loads and stores executed
sim_total_loads            25262074 # total number of loads executed
sim_total_stores       7180455.0000 # total number of stores executed
sim_total_branches         22729929 # total number of branches executed
sim_cycle                  99130566 # total simulation time in cycles
sim_IPC                      1.0088 # instructions per cycle
sim_CPI                      0.9913 # cycles per instruction
sim_exec_BW                  1.1164 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.8424 # instruction per branch
IFQ_count                 519935230 # cumulative IFQ occupancy
IFQ_fcount                 72154585 # cumulative IFQ full count
ifq_occupancy                5.2450 # avg IFQ occupancy (insn's)
ifq_rate                     1.1164 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  4.6982 # avg IFQ occupant latency (cycle's)
ifq_full                     0.7279 # fraction of time (cycle's) IFQ was full
RUU_count               19046263646 # cumulative RUU occupancy
RUU_fcount                        6 # cumulative RUU full count
ruu_occupancy              192.1331 # avg RUU occupancy (insn's)
ruu_rate                     1.1164 # avg RUU dispatch rate (insn/cycle)
ruu_latency                172.1048 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                9365561670 # cumulative LSQ occupancy
LSQ_fcount                 68884192 # cumulative LSQ full count
lsq_occupancy               94.4770 # avg LSQ occupancy (insn's)
lsq_rate                     1.1164 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 84.6286 # avg LSQ occupant latency (cycle's)
lsq_full                     0.6949 # fraction of time (cycle's) LSQ was full
sim_slip                28345997637 # total number of slip cycles
avg_sim_slip               283.4600 # the average slip between issue and retirement
bpred_bimod.lookups        23303857 # total number of bpred lookups
bpred_bimod.updates        20651017 # total number of updates
bpred_bimod.addr_hits      19957411 # total number of address-predicted hits
bpred_bimod.dir_hits       19964327 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           686690 # total number of misses
bpred_bimod.jr_hits         1138040 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1144770 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP         3060 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP         3065 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9664 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9667 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9941 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9984 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1249304 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1187421 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1141705 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1134980 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9941 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              113216169 # total number of accesses
il1.hits                  113215758 # total number of hits
il1.misses                      411 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               27103664 # total number of accesses
dl1.hits                   23753838 # total number of hits
dl1.misses                  3349826 # total number of misses
dl1.replacements            3348802 # total number of replacements
dl1.writebacks                42373 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1236 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1236 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                3392610 # total number of accesses
ul2.hits                    3362046 # total number of hits
ul2.misses                    30564 # total number of misses
ul2.replacements               8443 # total number of replacements
ul2.writebacks                 4184 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0090 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0025 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0012 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             113216169 # total number of accesses
itlb.hits                 113216149 # total number of hits
itlb.misses                      20 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              31241300 # total number of accesses
dtlb.hits                  29172714 # total number of hits
dtlb.misses                 2068586 # total number of misses
dtlb.replacements           2068458 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0662 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0662 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 368640 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83584 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120013040 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 1809 # total number of pages allocated
mem.page_mem                 14472k # total size of memory pages allocated
mem.ptab_misses              251051 # total first level page table misses
mem.ptab_accesses        1157128488 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -cache:dl1 dl1:64:32:16:l -cache:il1 il1:64:32:16:l -cache:dl2 ul2:2048:64:16:l -fetch:ifqsize 6 -decode:width 4 -issue:width 14 -commit:width 8 -ruu:size 512 -lsq:size 128 -mem:lat 48 1 -mem:width 32 -res:ialu 6 -res:imult 2 -res:memport 2 -res:fpalu 2 -res:fpmult 2 ../../exe/applu.exe 

sim: simulation started @ Wed Oct  9 20:04:04 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              6 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width               14 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               8 # instruction commit B/W (insts/cycle)
-ruu:size                 512 # register update unit (RUU) size
-lsq:size                 128 # load/store queue (LSQ) size
-cache:dl1       dl1:64:32:16:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:2048:64:16:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:64:32:16:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         48 1 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   6 # total number of integer ALU's available
-res:imult                  2 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  2 # total number of floating point ALU's available
-res:fpmult                 2 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
warning: partially supported sigaction() call...
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               24753982 # total number of loads and stores committed
sim_num_loads              20943497 # total number of loads committed
sim_num_stores         3810485.0000 # total number of stores committed
sim_num_branches            2600444 # total number of branches committed
sim_elapsed_time                 23 # total simulation time in seconds
sim_inst_rate          4347826.1739 # simulation speed (in insts/sec)
sim_total_insn            101609995 # total number of instructions executed
sim_total_refs             25928183 # total number of loads and stores executed
sim_total_loads            22117658 # total number of loads executed
sim_total_stores       3810525.0000 # total number of stores executed
sim_total_branches          2600449 # total number of branches executed
sim_cycle                  29080043 # total simulation time in cycles
sim_IPC                      3.4388 # instructions per cycle
sim_CPI                      0.2908 # cycles per instruction
sim_exec_BW                  3.4941 # total instructions (mis-spec + committed) per cycle
sim_IPB                     38.4550 # instruction per branch
IFQ_count                 111282874 # cumulative IFQ occupancy
IFQ_fcount                  2039859 # cumulative IFQ full count
ifq_occupancy                3.8268 # avg IFQ occupancy (insn's)
ifq_rate                     3.4941 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.0952 # avg IFQ occupant latency (cycle's)
ifq_full                     0.0701 # fraction of time (cycle's) IFQ was full
RUU_count                4012847482 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy              137.9932 # avg RUU occupancy (insn's)
ruu_rate                     3.4941 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 39.4926 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                1093392329 # cumulative LSQ occupancy
LSQ_fcount                  1037749 # cumulative LSQ full count
lsq_occupancy               37.5994 # avg LSQ occupancy (insn's)
lsq_rate                     3.4941 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 10.7607 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0357 # fraction of time (cycle's) LSQ was full
sim_slip                 5228189638 # total number of slip cycles
avg_sim_slip                52.2819 # the average slip between issue and retirement
bpred_bimod.lookups         2600488 # total number of bpred lookups
bpred_bimod.updates         2600442 # total number of updates
bpred_bimod.addr_hits       2200842 # total number of address-predicted hits
bpred_bimod.dir_hits        2200851 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           399591 # total number of misses
bpred_bimod.jr_hits               0 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen               0 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8463 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8463 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP            0 # total number of RAS predictions used
bpred_bimod.ras_hits.PP            0 # total number of RAS hits
bpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              103212878 # total number of accesses
il1.hits                  103212791 # total number of hits
il1.misses                       87 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               24354443 # total number of accesses
dl1.hits                   24189069 # total number of hits
dl1.misses                   165374 # total number of misses
dl1.replacements             164350 # total number of replacements
dl1.writebacks               164350 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0068 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0067 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0067 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 329811 # total number of accesses
ul2.hits                     245959 # total number of hits
ul2.misses                    83852 # total number of misses
ul2.replacements              51084 # total number of replacements
ul2.writebacks                50945 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2542 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.1549 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.1545 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             103212878 # total number of accesses
itlb.hits                 103212876 # total number of hits
itlb.misses                       2 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              24754059 # total number of accesses
dtlb.hits                  24752707 # total number of hits
dtlb.misses                    1352 # total number of misses
dtlb.replacements              1224 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 286720 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              198820592 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000ac40 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 2162 # total number of pages allocated
mem.page_mem                 17296k # total size of memory pages allocated
mem.ptab_misses                2541 # total first level page table misses
mem.ptab_accesses        1121156714 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -cache:dl1 dl1:64:32:16:l -cache:il1 il1:64:32:16:l -cache:dl2 ul2:2048:64:16:l -fetch:ifqsize 6 -decode:width 4 -issue:width 14 -commit:width 8 -ruu:size 512 -lsq:size 128 -mem:lat 48 1 -mem:width 32 -res:ialu 6 -res:imult 2 -res:memport 2 -res:fpalu 2 -res:fpmult 2 ../../exe/eon.exe chair.control.cook chair.camera chair.surfaces chair.cook.ppm ppm pixels_out.cook 

sim: simulation started @ Wed Oct  9 20:04:28 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              6 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width               14 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               8 # instruction commit B/W (insts/cycle)
-ruu:size                 512 # register update unit (RUU) size
-lsq:size                 128 # load/store queue (LSQ) size
-cache:dl1       dl1:64:32:16:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:2048:64:16:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:64:32:16:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         48 1 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   6 # total number of integer ALU's available
-res:imult                  2 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  2 # total number of floating point ALU's available
-res:fpmult                 2 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
getting pixel output filename pixels_out.cook
opening control file chair.control.cook
opening camera file chair.camera
opening surfaces file chair.surfaces
reading data
processing 8parts
Grid measure is 6 by 3.0001 by 6
cell dimension is 0.863065
Creating grid for list of length 21
Grid size = 7 by 4 by 7
Total occupancy = 236
reading control stream
reading camera stream
Writing to chair.cook.ppm
calculating 150 by 150 image with 400 samples
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               45809994 # total number of loads and stores committed
sim_num_loads              26441674 # total number of loads committed
sim_num_stores         19368320.0000 # total number of stores committed
sim_num_branches           10337355 # total number of branches committed
sim_elapsed_time                 35 # total simulation time in seconds
sim_inst_rate          2857142.8857 # simulation speed (in insts/sec)
sim_total_insn            114811878 # total number of instructions executed
sim_total_refs             52621401 # total number of loads and stores executed
sim_total_loads            30930451 # total number of loads executed
sim_total_stores       21690950.0000 # total number of stores executed
sim_total_branches         12185906 # total number of branches executed
sim_cycle                  37263494 # total simulation time in cycles
sim_IPC                      2.6836 # instructions per cycle
sim_CPI                      0.3726 # cycles per instruction
sim_exec_BW                  3.0811 # total instructions (mis-spec + committed) per cycle
sim_IPB                      9.6737 # instruction per branch
IFQ_count                 120940292 # cumulative IFQ occupancy
IFQ_fcount                   708110 # cumulative IFQ full count
ifq_occupancy                3.2455 # avg IFQ occupancy (insn's)
ifq_rate                     3.0811 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.0534 # avg IFQ occupant latency (cycle's)
ifq_full                     0.0190 # fraction of time (cycle's) IFQ was full
RUU_count                2380503383 # cumulative RUU occupancy
RUU_fcount                    33029 # cumulative RUU full count
ruu_occupancy               63.8830 # avg RUU occupancy (insn's)
ruu_rate                     3.0811 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 20.7339 # avg RUU occupant latency (cycle's)
ruu_full                     0.0009 # fraction of time (cycle's) RUU was full
LSQ_count                1041687529 # cumulative LSQ occupancy
LSQ_fcount                   309312 # cumulative LSQ full count
lsq_occupancy               27.9546 # avg LSQ occupancy (insn's)
lsq_rate                     3.0811 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  9.0730 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0083 # fraction of time (cycle's) LSQ was full
sim_slip                 3448192850 # total number of slip cycles
avg_sim_slip                34.4819 # the average slip between issue and retirement
bpred_bimod.lookups        12496318 # total number of bpred lookups
bpred_bimod.updates        10337347 # total number of updates
bpred_bimod.addr_hits       9298921 # total number of address-predicted hits
bpred_bimod.dir_hits        9542911 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           794436 # total number of misses
bpred_bimod.jr_hits         1455941 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1699747 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       342012 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       429390 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8995 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9231 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8566 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.7965 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1380736 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1521020 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1270357 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1113929 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.8769 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              118632568 # total number of accesses
il1.hits                  118631808 # total number of hits
il1.misses                      760 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               43154011 # total number of accesses
dl1.hits                   43077432 # total number of hits
dl1.misses                    76579 # total number of misses
dl1.replacements              75555 # total number of replacements
dl1.writebacks                40331 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0018 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0018 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0009 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 117670 # total number of accesses
ul2.hits                     116315 # total number of hits
ul2.misses                     1355 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0115 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             118632568 # total number of accesses
itlb.hits                 118632532 # total number of hits
itlb.misses                      36 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              48152894 # total number of accesses
dtlb.hits                  48152842 # total number of hits
dtlb.misses                      52 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 901120 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 330704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120020a30 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  171 # total number of pages allocated
mem.page_mem                  1368k # total size of memory pages allocated
mem.ptab_misses              202086 # total first level page table misses
mem.ptab_accesses        1723097841 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -cache:dl1 dl1:64:32:16:l -cache:il1 il1:64:32:16:l -cache:dl2 ul2:2048:64:16:l -fetch:ifqsize 6 -decode:width 4 -issue:width 14 -commit:width 8 -ruu:size 512 -lsq:size 128 -mem:lat 48 1 -mem:width 32 -res:ialu 6 -res:imult 2 -res:memport 2 -res:fpalu 2 -res:fpmult 2 ../../exe/equake.exe 

sim: simulation started @ Wed Oct  9 20:05:04 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              6 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width               14 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               8 # instruction commit B/W (insts/cycle)
-ruu:size                 512 # register update unit (RUU) size
-lsq:size                 128 # load/store queue (LSQ) size
-cache:dl1       dl1:64:32:16:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:2048:64:16:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:64:32:16:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         48 1 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   6 # total number of integer ALU's available
-res:imult                  2 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  2 # total number of floating point ALU's available
-res:fpmult                 2 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
../../exe/equake.exe: Reading nodes.
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000002 # total number of instructions committed
sim_num_refs               35365797 # total number of loads and stores committed
sim_num_loads              26880461 # total number of loads committed
sim_num_stores         8485336.0000 # total number of stores committed
sim_num_branches           16535688 # total number of branches committed
sim_elapsed_time                 25 # total simulation time in seconds
sim_inst_rate          4000000.0800 # simulation speed (in insts/sec)
sim_total_insn            110924830 # total number of instructions executed
sim_total_refs             38715018 # total number of loads and stores executed
sim_total_loads            29603774 # total number of loads executed
sim_total_stores       9111244.0000 # total number of stores executed
sim_total_branches         18156567 # total number of branches executed
sim_cycle                  34681076 # total simulation time in cycles
sim_IPC                      2.8834 # instructions per cycle
sim_CPI                      0.3468 # cycles per instruction
sim_exec_BW                  3.1984 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.0475 # instruction per branch
IFQ_count                 114296867 # cumulative IFQ occupancy
IFQ_fcount                   206110 # cumulative IFQ full count
ifq_occupancy                3.2957 # avg IFQ occupancy (insn's)
ifq_rate                     3.1984 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.0304 # avg IFQ occupant latency (cycle's)
ifq_full                     0.0059 # fraction of time (cycle's) IFQ was full
RUU_count                 753512450 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy               21.7269 # avg RUU occupancy (insn's)
ruu_rate                     3.1984 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  6.7930 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                 271098154 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                7.8169 # avg LSQ occupancy (insn's)
lsq_rate                     3.1984 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.4440 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                 1103508639 # total number of slip cycles
avg_sim_slip                11.0351 # the average slip between issue and retirement
bpred_bimod.lookups        18531111 # total number of bpred lookups
bpred_bimod.updates        16535687 # total number of updates
bpred_bimod.addr_hits      15904097 # total number of address-predicted hits
bpred_bimod.dir_hits       15938733 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           596954 # total number of misses
bpred_bimod.jr_hits         2703674 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         2767615 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       245217 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       274650 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9618 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9639 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9769 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8928 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      2766458 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      2537719 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      2492965 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      2458457 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9862 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              112176846 # total number of accesses
il1.hits                  112176503 # total number of hits
il1.misses                      343 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               35858622 # total number of accesses
dl1.hits                   35844781 # total number of hits
dl1.misses                    13841 # total number of misses
dl1.replacements              12817 # total number of replacements
dl1.writebacks                10484 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0004 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0004 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                  24668 # total number of accesses
ul2.hits                      17521 # total number of hits
ul2.misses                     7147 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2897 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             112176846 # total number of accesses
itlb.hits                 112176829 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              36876119 # total number of accesses
dtlb.hits                  36875996 # total number of hits
dtlb.misses                     123 # total number of misses
dtlb.replacements                 8 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 237568 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  76576 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000cee0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  198 # total number of pages allocated
mem.page_mem                  1584k # total size of memory pages allocated
mem.ptab_misses             7924431 # total first level page table misses
mem.ptab_accesses        1472191198 # total page table accesses
mem.ptab_miss_rate           0.0054 # first level page table miss rate

sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: sim-outorder -fastfwd 100000000 -max:inst 100000000 -cache:dl1 dl1:64:32:16:l -cache:il1 il1:64:32:16:l -cache:dl2 ul2:2048:64:16:l -fetch:ifqsize 6 -decode:width 4 -issue:width 14 -commit:width 8 -ruu:size 512 -lsq:size 128 -mem:lat 48 1 -mem:width 32 -res:ialu 6 -res:imult 2 -res:memport 2 -res:fpalu 2 -res:fpmult 2 ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Wed Oct  9 20:05:29 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              6 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width               14 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               8 # instruction commit B/W (insts/cycle)
-ruu:size                 512 # register update unit (RUU) size
-lsq:size                 128 # load/store queue (LSQ) size
-cache:dl1       dl1:64:32:16:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:2048:64:16:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:64:32:16:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         48 1 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                 32 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   6 # total number of integer ALU's available
-res:imult                  2 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  2 # total number of floating point ALU's available
-res:fpmult                 2 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 100000000 insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               23147910 # total number of loads and stores committed
sim_num_loads              18700741 # total number of loads committed
sim_num_stores         4447169.0000 # total number of stores committed
sim_num_branches           19702630 # total number of branches committed
sim_elapsed_time                 35 # total simulation time in seconds
sim_inst_rate          2857142.8857 # simulation speed (in insts/sec)
sim_total_insn            147420879 # total number of instructions executed
sim_total_refs             33654503 # total number of loads and stores executed
sim_total_loads            28157224 # total number of loads executed
sim_total_stores       5497279.0000 # total number of stores executed
sim_total_branches         27994029 # total number of branches executed
sim_cycle                  54916622 # total simulation time in cycles
sim_IPC                      1.8209 # instructions per cycle
sim_CPI                      0.5492 # cycles per instruction
sim_exec_BW                  2.6844 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.0755 # instruction per branch
IFQ_count                 158390254 # cumulative IFQ occupancy
IFQ_fcount                    13241 # cumulative IFQ full count
ifq_occupancy                2.8842 # avg IFQ occupancy (insn's)
ifq_rate                     2.6844 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.0744 # avg IFQ occupant latency (cycle's)
ifq_full                     0.0002 # fraction of time (cycle's) IFQ was full
RUU_count                1103880568 # cumulative RUU occupancy
RUU_fcount                     2112 # cumulative RUU full count
ruu_occupancy               20.1010 # avg RUU occupancy (insn's)
ruu_rate                     2.6844 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  7.4880 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                 270926805 # cumulative LSQ occupancy
LSQ_fcount                     6134 # cumulative LSQ full count
lsq_occupancy                4.9334 # avg LSQ occupancy (insn's)
lsq_rate                     2.6844 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.8378 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0001 # fraction of time (cycle's) LSQ was full
sim_slip                 1090932181 # total number of slip cycles
avg_sim_slip                10.9093 # the average slip between issue and retirement
bpred_bimod.lookups        29959085 # total number of bpred lookups
bpred_bimod.updates        19702627 # total number of updates
bpred_bimod.addr_hits      16855843 # total number of address-predicted hits
bpred_bimod.dir_hits       16951046 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          2751581 # total number of misses
bpred_bimod.jr_hits         1314270 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1409179 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8555 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8603 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9326 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1697504 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1836900 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1395506 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1300616 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9320 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              158326057 # total number of accesses
il1.hits                  158325228 # total number of hits
il1.misses                      829 # total number of misses
il1.replacements                 14 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               26594484 # total number of accesses
dl1.hits                   26259245 # total number of hits
dl1.misses                   335239 # total number of misses
dl1.replacements             334215 # total number of replacements
dl1.writebacks               105563 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0126 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0126 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0040 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 441631 # total number of accesses
ul2.hits                     387268 # total number of hits
ul2.misses                    54363 # total number of misses
ul2.replacements              21595 # total number of replacements
ul2.writebacks                12979 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.1231 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0489 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0294 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             158326057 # total number of accesses
itlb.hits                 158326026 # total number of hits
itlb.misses                      31 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              27287585 # total number of accesses
dtlb.hits                  27258091 # total number of hits
dtlb.misses                   29494 # total number of misses
dtlb.replacements             29366 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0011 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0011 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 409600 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  83856 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120015520 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  428 # total number of pages allocated
mem.page_mem                  3424k # total size of memory pages allocated
mem.ptab_misses              257034 # total first level page table misses
mem.ptab_accesses        1108230326 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

